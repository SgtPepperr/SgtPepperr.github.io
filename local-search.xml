<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CSAPP(一):Data Lab笔记</title>
    <link href="/2022/02/17/CSAPP%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2022/02/17/CSAPP%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p>《CS：APP》又名深入理解计算机系统，被称为计算机学习的圣经，假期总算有时间进行一个习的学，在阅读书籍，观看CMU网课的同时，也顺便完成了部分lab，不得不说lab很有挑战，对于相应章节知识的学习和理解具有很棒的作用，本篇为第二章内容的lab: DATA LAB的学习笔记，下附相关学习资料。</p><p><strong>lab学习官网</strong>：<a href="http://csapp.cs.cmu.edu/3e/labs.html">CS:APP3e, Bryant and O’Hallaron (cmu.edu)</a></p><p><strong>网课地址</strong>：<a href="https://www.bilibili.com/video/BV1iW411d7hd?p=4">【精校中英字幕】2015 CMU 15-213 CSAPP 深入理解计算机系统 课程视频_哔哩哔哩_bilibili</a></p><p><strong>参考资源和博客</strong>：<a href="https://github.com/Exely/CSAPP-Labs">《深入理解计算机系统》第三版的实验文件、解答与笔记 (github.com)</a></p><h1 id="Data-Lab笔记"><a href="#Data-Lab笔记" class="headerlink" title="Data Lab笔记"></a>Data Lab笔记</h1><p>本lab内容主要包括位运算，补码运算，浮点数等相关内容，完成lab需要实现函数功能，同时会限制使用op运算符的个数,因此增加了完成的难度，所有的实现都基于32位系统。</p><p>所有的函数实现都在<code>bits.c</code>中完成，可以使用<code>./btest</code>对实现函数的正确性进行检验。使用<code>./dlc</code>对完成函数的语法正确性和使用操作符的限制进行检验，使用<code>./driver.pl</code>对以上两项检验进行合并。</p><blockquote><p>本次lab实现的函数为2017年版本，最新的版本为2019年版本，对很多实现函数要求进行了更新。</p></blockquote><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="1-位操作"><a href="#1-位操作" class="headerlink" title="1.位操作"></a>1.位操作</h2><h5 id="1-bitAnd"><a href="#1-bitAnd" class="headerlink" title="1.bitAnd"></a>1.bitAnd</h5><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * bitAnd - x&amp;y using only ~ and | </span><br><span class="hljs-comment"> *   Example: bitAnd(6, 5) = 4</span><br><span class="hljs-comment"> *   Legal ops: ~ |</span><br><span class="hljs-comment"> *   Max ops: 8</span><br><span class="hljs-comment"> *   Rating: 1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bitAnd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> ~(~x|~y);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>题目要求只使用<code>~</code>和<code>|</code>完成<code>&amp;</code>，参考德摩根定律即可实现</p><h5 id="2-getByte"><a href="#2-getByte" class="headerlink" title="2.getByte"></a>2.getByte</h5><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * getByte - Extract byte n from word x</span><br><span class="hljs-comment"> *   Bytes numbered from 0 (LSB) to 3 (MSB)</span><br><span class="hljs-comment"> *   Examples: getByte(0x12345678,1) = 0x56</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 6</span><br><span class="hljs-comment"> *   Rating: 2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getByte</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br> <span class="hljs-keyword">int</span> a=(x&gt;&gt;(n&lt;&lt;<span class="hljs-number">3</span>))&amp;<span class="hljs-number">0xff</span>;<br> <span class="hljs-keyword">return</span> a;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>本题是从 x 中提取出第 i 个字节（i=0,1,2,3），方法就是将那个字节移位至最低位，然后用屏蔽码 <code>0xff</code> 提取就可以了</p><h5 id="3-logicalShift"><a href="#3-logicalShift" class="headerlink" title="3.logicalShift"></a>3.logicalShift</h5><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * logicalShift - shift x to the right by n, using a logical shift</span><br><span class="hljs-comment"> *   Can assume that 0 &lt;= n &lt;= 31</span><br><span class="hljs-comment"> *   Examples: logicalShift(0x87654321,4) = 0x08765432</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 20</span><br><span class="hljs-comment"> *   Rating: 3 </span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">logicalShift</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> mask=(<span class="hljs-number">1</span>&lt;&lt;(<span class="hljs-number">32</span>+~n))|((~(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">31</span>))&gt;&gt;n);<br>  <span class="hljs-keyword">return</span> x&gt;&gt;n&amp;mask;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>本题需要实现逻辑右移，本身c语言自带的<code>&gt;&gt;</code>指的是算术右移，因此可以在算术右移的基础上对其进行改进。</p><p>本题做法的核心思路是构造一个掩码，掩码可以对右移后的数据进行更新使其满足题意。例如右移4位，我们构造的掩码即为<code>0x0fffffff</code>，为此我们可以先构造一个<code>0x7fffffff</code>，因为其符号位为0，将其算术右移对应的n位后就可以满足上述的条件，但由于其移动n位的掩码正好与我们需要的差一位，因此补充一个<code>(1&lt;&lt;(31-n))的|</code>即可构造最终的掩码。</p><h5 id="4-bitCount"><a href="#4-bitCount" class="headerlink" title="4.bitCount"></a>4.bitCount</h5><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * bitCount - returns count of number of 1&#x27;s in word</span><br><span class="hljs-comment"> *   Examples: bitCount(5) = 2, bitCount(7) = 3</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 40</span><br><span class="hljs-comment"> *   Rating: 4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bitCount</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> mask1=<span class="hljs-number">0x55</span>;<br>  <span class="hljs-keyword">int</span> mask2=<span class="hljs-number">0x33</span>;<br>  <span class="hljs-keyword">int</span> mask3=<span class="hljs-number">0xf</span>;<br>  <span class="hljs-keyword">int</span> mask4=<span class="hljs-number">0xff</span>;<br>  <span class="hljs-keyword">int</span> mask5=<span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<br>  mask1=(mask1&lt;&lt;<span class="hljs-number">8</span>)|mask1;<br>  mask1=(mask1&lt;&lt;<span class="hljs-number">16</span>)|mask1;<br><span class="hljs-comment">// mask1=0x55555555   </span><br><br>  mask2=(mask2&lt;&lt;<span class="hljs-number">8</span>)|mask2;<br>  mask2=(mask2&lt;&lt;<span class="hljs-number">16</span>)|mask2;<br><span class="hljs-comment">//mask2=0x33333333</span><br><br>  mask3=(mask3&lt;&lt;<span class="hljs-number">8</span>)|mask3;<br>  mask3=(mask3&lt;&lt;<span class="hljs-number">16</span>)|mask3;<br><span class="hljs-comment">//mask3=0x0f0f0f0f</span><br><br>  mask5=(mask4&lt;&lt;<span class="hljs-number">8</span>)|mask4;<br><span class="hljs-comment">//mask5=0x0000ffff</span><br><br>  mask4=(mask4&lt;&lt;<span class="hljs-number">16</span>)|mask4;<br><span class="hljs-comment">//mask4=0x00ff00ff</span><br><br>  k=(x&amp;mask1)+((x&gt;&gt;<span class="hljs-number">1</span>)&amp;mask1);<br>  k=(k&amp;mask2)+((k&gt;&gt;<span class="hljs-number">2</span>)&amp;mask2);<br>  k=(k&amp;mask3)+((k&gt;&gt;<span class="hljs-number">4</span>)&amp;mask3);<br>  k=(k&amp;mask4)+((k&gt;&gt;<span class="hljs-number">8</span>)&amp;mask4);<br>  k=(k&amp;mask5)+((k&gt;&gt;<span class="hljs-number">16</span>)&amp;mask5);<br>  <span class="hljs-keyword">return</span> k;<br>&#125;<br><br><br><span class="hljs-comment">//直观写法</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">BitCount4</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> n)</span> </span><br><span class="hljs-function"></span>&#123; <br>    n = (n &amp;<span class="hljs-number">0x55555555</span>) + ((n &gt;&gt;<span class="hljs-number">1</span>) &amp;<span class="hljs-number">0x55555555</span>) ; <br>    n = (n &amp;<span class="hljs-number">0x33333333</span>) + ((n &gt;&gt;<span class="hljs-number">2</span>) &amp;<span class="hljs-number">0x33333333</span>) ; <br>    n = (n &amp;<span class="hljs-number">0x0f0f0f0f</span>) + ((n &gt;&gt;<span class="hljs-number">4</span>) &amp;<span class="hljs-number">0x0f0f0f0f</span>) ; <br>    n = (n &amp;<span class="hljs-number">0x00ff00ff</span>) + ((n &gt;&gt;<span class="hljs-number">8</span>) &amp;<span class="hljs-number">0x00ff00ff</span>) ; <br>    n = (n &amp;<span class="hljs-number">0x0000ffff</span>) + ((n &gt;&gt;<span class="hljs-number">16</span>) &amp;<span class="hljs-number">0x0000ffff</span>) ; <br><br>    <span class="hljs-keyword">return</span> n ; <br>&#125;<br></code></pre></div></td></tr></table></figure><p>本题的要求是统计32位int中1的个数，可以说难度是前5道题中难度最大的，由于不能使用循环，且有操作符个数限制，因此也不能使用暴力的方法，最终我参考了<a href="https://www.cnblogs.com/graphics/archive/2010/06/21/1752421.html">算法-求二进制数中1的个数 - 翰墨小生 - 博客园 (cnblogs.com)</a>中的平行算法。</p><p><img src="https://raw.githubusercontent.com/SgtPepperr/ImgStg/master/20220217221159.png"></p><p>这里构造了五个常数，分别是 <code>0x55555555，0x33333333，0x0f0f0f0f，0x00ff00ff，0x0000ffff</code>，就是分别间隔了1个0,2个0,4个0,8个0和16个0,利用这五个常数就能依次计算出五个值，第一个值每两位的值为 x 的对应的两个位的和（即这两位中 <code>1</code> 的数目），第二个值每四位是第一个值对应的四位中两个两位的和（即原 x 中 <code>1</code>的数目），依次类推最后一个值就是结果了；</p><h5 id="5-bang"><a href="#5-bang" class="headerlink" title="5.bang"></a>5.bang</h5><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * bang - Compute !x without using !</span><br><span class="hljs-comment"> *   Examples: bang(3) = 0, bang(0) = 1</span><br><span class="hljs-comment"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 12</span><br><span class="hljs-comment"> *   Rating: 4 </span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bang</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> ((x&gt;&gt;<span class="hljs-number">31</span>)^((x+~<span class="hljs-number">0</span>)&gt;&gt;<span class="hljs-number">31</span>))&amp;((~x)&gt;&gt;<span class="hljs-number">31</span>)&amp;<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//另一种实现</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bang</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>  x=(x&gt;&gt;<span class="hljs-number">16</span>)|x;<br>  x=(x&gt;&gt;<span class="hljs-number">8</span>)|x;<br>  x=(x&gt;&gt;<span class="hljs-number">4</span>)|x;<br>  x=(x&gt;&gt;<span class="hljs-number">2</span>)|x;<br>  x=(x&gt;&gt;<span class="hljs-number">1</span>)|x;<br>  <span class="hljs-keyword">return</span> ~x&amp;<span class="hljs-number">0x1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>本题要求使用不使用！来实现！。我在实现时发现了一个规律，对于x和x-1只有两种情况两个数的第31位是相反的，一是<code>x=0,x-1=0xffffffff</code>,二是<code>x=0x80000000,x-1=0x7fffffff</code>,因此利用异或把这种情况再特判要求x的31位为0即可满足条件。</p><p>另一种实现是使用了折叠法，把32个位上的1通过折叠的方式聚合到0位上，即只要有一个位为1，最终得到的就是0x1，否则为0，之后再对其进行处理，该方法更加巧妙。</p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h2 id="2-补码"><a href="#2-补码" class="headerlink" title="2.补码"></a>2.补码</h2><h5 id="6-tmin"><a href="#6-tmin" class="headerlink" title="6.tmin"></a>6.tmin</h5><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * tmin - return minimum two&#x27;s complement integer </span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 4</span><br><span class="hljs-comment"> *   Rating: 1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">tmin</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">31</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>最高位为1，其他位为0为最小值。</p><h5 id="7-fitsBits"><a href="#7-fitsBits" class="headerlink" title="7.fitsBits"></a>7.fitsBits</h5><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * fitsBits - return 1 if x can be represented as an </span><br><span class="hljs-comment"> *  n-bit, two&#x27;s complement integer.</span><br><span class="hljs-comment"> *   1 &lt;= n &lt;= 32</span><br><span class="hljs-comment"> *   Examples: fitsBits(5,3) = 0, fitsBits(-4,3) = 1</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 15</span><br><span class="hljs-comment"> *   Rating: 2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fitsBits</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> mask=x&gt;&gt;<span class="hljs-number">31</span>;<br><span class="hljs-comment">//  int check=x&gt;&gt;n;</span><br>  <span class="hljs-keyword">int</span> check=x&gt;&gt;(n+~<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> (!check&amp;!mask)|(!(check+<span class="hljs-number">1</span>)&amp;mask);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>本题为判断用n位能否用补码的形式表示一个x的数字，本题的解法是分情况讨论，分别为x&gt;=0和x&lt;0两种情况，将x向右移n-1位，判断其是否为0（负数的时候为-1），得到最终结果。</p><h5 id="8-divpwr2"><a href="#8-divpwr2" class="headerlink" title="8.divpwr2"></a>8.divpwr2</h5><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * divpwr2 - Compute x/(2^n), for 0 &lt;= n &lt;= 30</span><br><span class="hljs-comment"> *  Round toward zero</span><br><span class="hljs-comment"> *   Examples: divpwr2(15,1) = 7, divpwr2(-33,4) = -2</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 15</span><br><span class="hljs-comment"> *   Rating: 2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">divpwr2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br><span class="hljs-comment">//当x为负数时，才增加偏正因子</span><br>    <span class="hljs-keyword">int</span> mask=!(x&gt;&gt;<span class="hljs-number">31</span>)+~<span class="hljs-number">0</span>;<br><span class="hljs-comment">//    return ((x&gt;&gt;n)&amp;~mask)|(((x+(1&lt;&lt;n)+~0)&gt;&gt;n)&amp;mask);</span><br>    <span class="hljs-keyword">return</span> (x+(((<span class="hljs-number">1</span>&lt;&lt;n)+~<span class="hljs-number">0</span>)&amp;mask))&gt;&gt;n;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这题计算 x/(2^n) ，注意不能直接右移，直接右移是向下舍入的，题目要求是向零舍入，也就是正数向下舍入，负数向上舍入，这里参照 CS:APP 书上的做法，给负数加上一个偏正的因子 <code>(0x1&lt;&lt;n)+~0)</code> ，判断负数直接看符号位。</p><h5 id="9-negate"><a href="#9-negate" class="headerlink" title="9.negate"></a>9.negate</h5><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * negate - return -x </span><br><span class="hljs-comment"> *   Example: negate(1) = -1.</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 5</span><br><span class="hljs-comment"> *   Rating: 2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">negate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> ~x+<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>利用<code>-x=~x+1</code></p><h5 id="10-isPositive"><a href="#10-isPositive" class="headerlink" title="10.isPositive"></a>10.isPositive</h5><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * isPositive - return 1 if x &gt; 0, return 0 otherwise </span><br><span class="hljs-comment"> *   Example: isPositive(-1) = 0.</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 8</span><br><span class="hljs-comment"> *   Rating: 3</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">isPositive</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> !((x&gt;&gt;<span class="hljs-number">31</span>)|!x);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>判断是否x&gt;0,结合符号位，特判x=0的情况即可。</p><h5 id="11-isLessOrEqual"><a href="#11-isLessOrEqual" class="headerlink" title="11.isLessOrEqual"></a>11.isLessOrEqual</h5><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * isLessOrEqual - if x &lt;= y  then return 1, else return 0 </span><br><span class="hljs-comment"> *   Example: isLessOrEqual(4,5) = 1.</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 24</span><br><span class="hljs-comment"> *   Rating: 3</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">isLessOrEqual</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> x1=x&gt;&gt;<span class="hljs-number">31</span>;<br>  <span class="hljs-keyword">int</span> y1=y&gt;&gt;<span class="hljs-number">31</span>;<br>  <span class="hljs-keyword">int</span> z=x+~y+<span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">int</span> flag=z&gt;&gt;<span class="hljs-number">31</span>|!z;<br>  <span class="hljs-keyword">return</span> ((x1&amp;!y1)|(x1&amp;y1&amp;flag)|(!x1&amp;!y1&amp;flag))&amp;<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>对于x&lt;=y,可以分几种情况讨论。</p><ul><li><p>x&lt;0,y&gt;0时显然成立</p></li><li><p>x&lt;0,y&lt;0,x-y&lt;=0时成立，且x-y不会出现溢出</p></li><li><p>x&gt;0,y&gt;0,x-y&lt;=0时成立，且x-y不会出现溢出</p></li></ul><p>因此分三种情况讨论结合即可，x1,y1即是对正负性的判断</p><h5 id="12-ilog2"><a href="#12-ilog2" class="headerlink" title="12.ilog2"></a>12.ilog2</h5><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * ilog2 - return floor(log base 2 of x), where x &gt; 0</span><br><span class="hljs-comment"> *   Example: ilog2(16) = 4</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 90</span><br><span class="hljs-comment"> *   Rating: 4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ilog2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> flag1=!(x&gt;&gt;<span class="hljs-number">16</span>);<br>  <span class="hljs-keyword">int</span> flag2=<span class="hljs-number">0</span>,flag3=<span class="hljs-number">0</span>,flag4=<span class="hljs-number">0</span>,flag5=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//x&gt;&gt;16&gt;0时，x=x&gt;&gt;16，否则x=x，下方同理</span><br>  x=(x&gt;&gt;<span class="hljs-number">16</span>&amp;(flag1+~<span class="hljs-number">0</span>))|(x&amp;(!flag1+~<span class="hljs-number">0</span>));<br>  flag2=!(x&gt;&gt;<span class="hljs-number">8</span>);<br>  x=(x&gt;&gt;<span class="hljs-number">8</span>&amp;(flag2+~<span class="hljs-number">0</span>))|(x&amp;(!flag2+~<span class="hljs-number">0</span>));<br>  flag3=!(x&gt;&gt;<span class="hljs-number">4</span>);<br>  x=(x&gt;&gt;<span class="hljs-number">4</span>&amp;(flag3+~<span class="hljs-number">0</span>))|(x&amp;(!flag3+~<span class="hljs-number">0</span>));<br>  flag4=!(x&gt;&gt;<span class="hljs-number">2</span>);<br>  x=(x&gt;&gt;<span class="hljs-number">2</span>&amp;(flag4+~<span class="hljs-number">0</span>))|(x&amp;(!flag4+~<span class="hljs-number">0</span>));<br>  flag5=!(x&gt;&gt;<span class="hljs-number">1</span>);<br>  x=(x&gt;&gt;<span class="hljs-number">1</span>&amp;(flag5+~<span class="hljs-number">0</span>))|(x&amp;(!flag5+~<span class="hljs-number">0</span>));<br>  <span class="hljs-keyword">return</span> !flag5+(!flag4&lt;&lt;<span class="hljs-number">1</span>)+(!flag3&lt;&lt;<span class="hljs-number">2</span>)+(!flag2&lt;&lt;<span class="hljs-number">3</span>)+(!flag1&lt;&lt;<span class="hljs-number">4</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>上方的flag1-5得到的是x的最高位对应的2进制表示中是否包含16,8,4,2,1的底数，因为其对数可表示成<code>16*a+8*b+4*c+2*d+e</code>的形式，最终拼接起来即为最终结果，注意的是每一步对x进行了条件判断的赋值。</p><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><h2 id="3-浮点数"><a href="#3-浮点数" class="headerlink" title="3.浮点数"></a>3.浮点数</h2><p>以下三题关于浮点数，可以自由使用操作符和分支语句</p><h5 id="13-float-neg"><a href="#13-float-neg" class="headerlink" title="13.float_neg"></a>13.float_neg</h5><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * float_neg - Return bit-level equivalent of expression -f for</span><br><span class="hljs-comment"> *   floating point argument f.</span><br><span class="hljs-comment"> *   Both the argument and result are passed as unsigned int&#x27;s, but</span><br><span class="hljs-comment"> *   they are to be interpreted as the bit-level representations of</span><br><span class="hljs-comment"> *   single-precision floating point values.</span><br><span class="hljs-comment"> *   When argument is NaN, return argument.</span><br><span class="hljs-comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span><br><span class="hljs-comment"> *   Max ops: 10</span><br><span class="hljs-comment"> *   Rating: 2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-title">float_neg</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> uf)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span>((uf&amp;<span class="hljs-number">0x7fffff</span>)&amp;&amp;(((uf&gt;&gt;<span class="hljs-number">23</span>)&amp;<span class="hljs-number">0xff</span>)==<span class="hljs-number">0xff</span>))&#123;<br>    <span class="hljs-keyword">return</span> uf;<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">return</span> uf^<span class="hljs-number">0x80000000</span>;<br> &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>本题计算-f，即参数的负数，注意特判NaN的情况。</p><h5 id="14-float-i2f"><a href="#14-float-i2f" class="headerlink" title="14.float_i2f"></a>14.float_i2f</h5><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * float_i2f - Return bit-level equivalent of expression (float) x</span><br><span class="hljs-comment"> *   Result is returned as unsigned int, but</span><br><span class="hljs-comment"> *   it is to be interpreted as the bit-level representation of a</span><br><span class="hljs-comment"> *   single-precision floating point values.</span><br><span class="hljs-comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span><br><span class="hljs-comment"> *   Max ops: 30</span><br><span class="hljs-comment"> *   Rating: 4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-title">float_i2f</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> sign=x&amp;<span class="hljs-number">0x80000000</span>;<br>  <span class="hljs-keyword">int</span> xt=x;<br>  <span class="hljs-keyword">int</span> big=<span class="hljs-number">-1</span>,index=<span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">int</span> <span class="hljs-built_in">exp</span>=<span class="hljs-number">0</span>,frac=<span class="hljs-number">0</span>,cp1=<span class="hljs-number">0</span>,cp2=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//特判</span><br>  <span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span>(x==<span class="hljs-number">0x80000000</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0xcf000000</span>;<br><span class="hljs-comment">//根据符号位，取反  </span><br>  <span class="hljs-keyword">if</span>(sign)&#123;<br>   x=-x;<br>  &#125;<br><span class="hljs-comment">//  int big=oilog2(x&amp;0xffffffff);</span><br>  xt=<span class="hljs-number">0x7fffffff</span>&amp;x;<br>  <span class="hljs-keyword">while</span>(xt)&#123;<br>   xt=xt&gt;&gt;<span class="hljs-number">1</span>;<br>   big=big+<span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-built_in">exp</span>=<span class="hljs-number">127</span>+big;<br>  index=big<span class="hljs-number">-23</span>;<br>  <span class="hljs-keyword">if</span>(index&gt;<span class="hljs-number">0</span>)&#123;<br>   frac=(x&gt;&gt;index);<br>   cp1=<span class="hljs-number">1</span>&lt;&lt;(big<span class="hljs-number">-24</span>);<br>   cp2=x&amp;((cp1&lt;&lt;<span class="hljs-number">1</span>)<span class="hljs-number">-1</span>);<br>   <span class="hljs-keyword">if</span>(cp2&gt;cp1)&#123;<br>     frac=frac+<span class="hljs-number">1</span>;<br>   &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cp2==cp1)&#123;<br>     <span class="hljs-keyword">if</span>(frac&amp;<span class="hljs-number">1</span>)&#123;<br>       frac=frac+<span class="hljs-number">1</span>;<br>     &#125;<br>   &#125;<br>  &#125; <span class="hljs-keyword">else</span>&#123;<br>   frac=(x&lt;&lt;-index);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span>(frac==<span class="hljs-number">0x1000000</span>)&#123;<br>     <span class="hljs-built_in">exp</span>=<span class="hljs-built_in">exp</span>+<span class="hljs-number">1</span>;<br>  &#125; <br>  <span class="hljs-keyword">return</span> (<span class="hljs-built_in">exp</span>&lt;&lt;<span class="hljs-number">23</span>)|sign|(frac&amp;<span class="hljs-number">0x7fffff</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>本题为将整型数转化为浮点数格式，可以说是本lab里难度最大的题目，具有很多坑点，解读参考博客的解法。</p><p>整体思路就是依次计算符号位，阶码值和小数字段，符号位可以直接移位提取，阶码值就是除了符号位外最高位的位数减 1 再加上偏差 127，小数字段可以移位（负数可以化为正数操作）获得，但这问题没这么简单，<strong>有很多坑点</strong>：  </p><ol><li><p>特殊值 0 化为浮点数后是非规格化的，<strong>单独考虑</strong>；  </p></li><li><p>特殊值 0x80000000 是 2 的整数倍，小数部分用移位的话因为舍入问题会溢出，<strong>单独考虑</strong>；  </p></li><li><p><strong>要仔细考虑移位过程，左移还是右移能得到 23 位的小数部分</strong>，这里实际上是需要进行分类讨论，左移直接执行即可，右移由于涉及到舍入，所以需要进行一些判断；  </p></li><li><p>注意舍入问题，这里需要仔仔细细地考虑清楚，**默认使用向偶数舍入，就是舍去部分小于中间值舍弃，大于中间值进位，为中间值如 100 就向偶数舍入：就是看前一位，进位或舍弃总使得前一位为 0。 **舍入的知识可以参考<a href="https://blog.csdn.net/qq_34369618/article/details/52247350">(29条消息) 浮点数向偶数舍入的问题_南京大学的CS渣-CSDN博客_向偶数舍入</a></p></li><li><p>最后就是操作数目限制在 30 位，这个需要对写完的代码进行一步步精简，我最终的实现正好是30个操作符。</p></li></ol><h5 id="15-float-twice"><a href="#15-float-twice" class="headerlink" title="15.float_twice"></a>15.float_twice</h5><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * float_twice - Return bit-level equivalent of expression 2*f for</span><br><span class="hljs-comment"> *   floating point argument f.</span><br><span class="hljs-comment"> *   Both the argument and result are passed as unsigned int&#x27;s, but</span><br><span class="hljs-comment"> *   they are to be interpreted as the bit-level representation of</span><br><span class="hljs-comment"> *   single-precision floating point values.</span><br><span class="hljs-comment"> *   When argument is NaN, return argument</span><br><span class="hljs-comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span><br><span class="hljs-comment"> *   Max ops: 30</span><br><span class="hljs-comment"> *   Rating: 4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-title">float_twice</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> uf)</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> tmp=uf;<br>  <span class="hljs-keyword">int</span> sign=((uf&gt;&gt;<span class="hljs-number">31</span>)&lt;&lt;<span class="hljs-number">31</span>); <span class="hljs-comment">/* 0x80000000 or 0x0 */</span><br>  <span class="hljs-keyword">int</span> <span class="hljs-built_in">exp</span>=uf&amp;<span class="hljs-number">0x7f800000</span>;<br>  <span class="hljs-keyword">int</span> f=uf&amp;<span class="hljs-number">0x7fffff</span>;<br>  tmp=tmp&amp;<span class="hljs-number">0x7fffffff</span>; <span class="hljs-comment">/* remove sign */</span><br>  <span class="hljs-keyword">if</span>((tmp&gt;&gt;<span class="hljs-number">23</span>)==<span class="hljs-number">0x0</span>)&#123;<br>    tmp=tmp&lt;&lt;<span class="hljs-number">1</span>|sign;<br>    <span class="hljs-keyword">return</span> tmp;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((tmp&gt;&gt;<span class="hljs-number">23</span>)==<span class="hljs-number">0xff</span>)&#123;<br>    <span class="hljs-keyword">return</span> uf;<br>  &#125;  <span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">if</span>((<span class="hljs-built_in">exp</span>&gt;&gt;<span class="hljs-number">23</span>)+<span class="hljs-number">1</span>==<span class="hljs-number">0xff</span>)&#123;<br>      <span class="hljs-keyword">return</span> sign|<span class="hljs-number">0x7f800000</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-keyword">return</span> sign|(((<span class="hljs-built_in">exp</span>&gt;&gt;<span class="hljs-number">23</span>)+<span class="hljs-number">1</span>)&lt;&lt;<span class="hljs-number">23</span>)|f;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> tmp;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>本题为求参数的2倍，对于无穷大和NAN的情况直接返回，其他情况需要分规格化和非规格化两种情况讨论。</p><ul><li><p>对于规格化的情况，在阶码值上+1，但是对于溢出的时候需要返回无穷大</p></li><li><p>对于非规格化情况，将除符号位的数字左移一位即可，因为这时阶码值为 0 ,两倍就相当于小数字段左移一位，不用担心溢出的情况，溢出时阶码值加 1,小数字段左移一位，相当于整体左移了。（这里可以感叹一下浮点数编码设计的巧妙！）</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本lab虽然面向的知识比较基础，但是难度并不小，需要在写码的过程中，不断琢磨各种精妙和可靠的实现（例如使用|和&amp;来实现分类讨论），花费了数天的时间完成（包括搭建和熟悉环境）。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数学建模美赛（一）：拟合与插值</title>
    <link href="/2022/01/28/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%BE%8E%E8%B5%9B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2022/01/28/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%BE%8E%E8%B5%9B%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>本博客为备考2022年数学建模美赛，进行相关知识梳理和总结，ppt内容和代码来自课程《数学建模和入门》</p><h2 id="一、预测类数学模型——拟合与插值"><a href="#一、预测类数学模型——拟合与插值" class="headerlink" title="一、预测类数学模型——拟合与插值"></a>一、预测类数学模型——拟合与插值</h2><h3 id="1-曲线拟合问题"><a href="#1-曲线拟合问题" class="headerlink" title="1.曲线拟合问题"></a>1.曲线拟合问题</h3><p>已知一组（二维）数据，即平面上 n 个点（xi, yi),i=1,…n, 寻求一个函数（曲线）y = f(x) , 使 f(x) 在某种准则下与所有数据点最为接近，即曲线拟合得最好。</p><blockquote><p>其中会引入误差平方和等概念来表示曲线拟合的效果，该值越小，则拟合效果越好。</p></blockquote><h3 id="2-拟合与插值的关系"><a href="#2-拟合与插值的关系" class="headerlink" title="2.拟合与插值的关系"></a>2.拟合与插值的关系</h3><p>问题：给定一批数据点，需确定满足特定要求的曲线或曲面</p><p>解决方案：</p><ul><li><p>若要求所求曲线（面）通过所给所有数据点，就是插值问题；</p></li><li><p>若不要求曲线（面）通过所有数据点，而是要求它反映对象整体的变化趋势，这就是数据拟合，又称曲线拟合或曲面拟合。</p></li></ul><p>函数插值与曲线拟合都是要根据一组数据构造一个函数作为近似，由于近似的要求不同，二者的数学方法上完全不同。</p><h2 id="二、拟合基本实例"><a href="#二、拟合基本实例" class="headerlink" title="二、拟合基本实例"></a>二、拟合基本实例</h2><p><img src="https://raw.githubusercontent.com/SgtPepperr/ImgStg/master/20220128130702.png"></p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">t=[<span class="hljs-number">20.5</span> <span class="hljs-number">32.5</span> <span class="hljs-number">51</span> <span class="hljs-number">73</span> <span class="hljs-number">95.7</span>];<br>r=[<span class="hljs-number">765</span> <span class="hljs-number">826</span> <span class="hljs-number">873</span> <span class="hljs-number">942</span> <span class="hljs-number">1032</span>];<br><span class="hljs-comment">%polyfit进行线性拟合，t为自变量，r为因变量，1代表变量维数</span><br>aa=polyfit(t,r,<span class="hljs-number">1</span>);<br>a=aa(<span class="hljs-number">1</span>)<br>b=aa(<span class="hljs-number">2</span>)<br><span class="hljs-comment">%利用polyval计算t对应的拟合函数值</span><br>y=polyval(aa,t);<br><span class="hljs-comment">%plot代表二维绘图，t为自变量，r为因变量，r，k+代表图像标记方式，字母为颜色（r代表red)，</span><br><span class="hljs-comment">%+代表表现符号</span><br><span class="hljs-built_in">plot</span>(t,r,<span class="hljs-string">&#x27;k+&#x27;</span>,t,y,<span class="hljs-string">&#x27;r&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/SgtPepperr/ImgStg/master/20220128131305.png"></p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">t=[<span class="hljs-number">0.25</span> <span class="hljs-number">0.5</span> <span class="hljs-number">1</span> <span class="hljs-number">1.5</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span>];<br>c=[<span class="hljs-number">19.21</span> <span class="hljs-number">18.15</span> <span class="hljs-number">15.36</span> <span class="hljs-number">14.10</span> <span class="hljs-number">12.89</span> <span class="hljs-number">9.32</span> <span class="hljs-number">7.45</span> <span class="hljs-number">5.24</span> <span class="hljs-number">3.01</span>];<br><span class="hljs-built_in">plot</span>(t,c,<span class="hljs-string">&#x27;r*&#x27;</span>)<br><span class="hljs-comment">%pause代表停顿，用任意键使程序继续运行</span><br>pause<br><span class="hljs-comment">%semilogy代表使y轴为对数坐标轴</span><br>semilogy(t,c,<span class="hljs-string">&#x27;+&#x27;</span>)<br>pause <br><span class="hljs-built_in">plot</span>(t,c,<span class="hljs-string">&#x27;r*&#x27;</span>)<br><span class="hljs-comment">%hold on指在绘制下一张图时保留前一张图</span><br><span class="hljs-built_in">hold</span> on<br>c0=<span class="hljs-number">23</span>;<br>k=<span class="hljs-number">0.3</span>;<br>c1=c0*<span class="hljs-built_in">exp</span>(-k*t);<br><span class="hljs-built_in">plot</span>(t,c1,<span class="hljs-string">&#x27;b*&#x27;</span>)<br></code></pre></div></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="三、三种插值"><a href="#三、三种插值" class="headerlink" title="三、三种插值"></a>三、三种插值</h2><p>三种插值分别为最近临插值、线性插值、样条插值。以下为三种插值的实现和曲线拟合对比图。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">x=[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">15</span> <span class="hljs-number">17</span>];<br>f=[<span class="hljs-number">1.5</span> <span class="hljs-number">3.9</span> <span class="hljs-number">6</span> <span class="hljs-number">11.7</span> <span class="hljs-number">12.6</span> <span class="hljs-number">18.8</span> <span class="hljs-number">20.3</span> <span class="hljs-number">20.6</span> <span class="hljs-number">21.1</span>];<br>axis([<span class="hljs-number">0</span> <span class="hljs-number">18</span> <span class="hljs-number">1</span>  <span class="hljs-number">22</span>])<br>xlabel(<span class="hljs-string">&#x27;x&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;f&#x27;</span>)<br>y=<span class="hljs-number">1</span>:<span class="hljs-number">0.1</span>:<span class="hljs-number">17</span>;<br><span class="hljs-comment">%代表绘图1，后续还有绘图2和3分别是产生新的绘图</span><br><br><span class="hljs-built_in">figure</span>(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">plot</span>(x,f,<span class="hljs-string">&#x27;o&#x27;</span>)<br><span class="hljs-comment">%在图中产生标记点位</span><br>gtext(<span class="hljs-string">&#x27;已知数据点&#x27;</span>)<br><span class="hljs-built_in">hold</span> on;pause<br><br><span class="hljs-comment">%插值函数，总共提供四个参数，前两个参数为提供的数据点横纵坐标，第三个参数为实际曲线的</span><br><span class="hljs-comment">%所有横指标值，第四个参数为插值类型，nearest指最近临插值。</span><br>bb1=interp1(x,f,y,<span class="hljs-string">&#x27;nearest&#x27;</span>)<br><span class="hljs-built_in">plot</span>(y,bb1)<br>gtext(<span class="hljs-string">&#x27;nearest&#x27;</span>)<br><span class="hljs-built_in">hold</span> on;pause<br>a=polyfit(x,f,<span class="hljs-number">3</span>)<br>aa=polyval(a,y)<br><span class="hljs-built_in">plot</span>(y,aa)<br>gtext(<span class="hljs-string">&#x27;曲线拟合&#x27;</span>)<br><span class="hljs-built_in">hold</span> off;pause<br><br><span class="hljs-built_in">figure</span>(<span class="hljs-number">2</span>)<br><br><span class="hljs-built_in">plot</span>(x,f,<span class="hljs-string">&#x27;o&#x27;</span>)<br>gtext(<span class="hljs-string">&#x27;已知数据点&#x27;</span>)<br><span class="hljs-built_in">hold</span> on;pause<br>bb1=interp1(x,f,y,<span class="hljs-string">&#x27;linear&#x27;</span>)<br><span class="hljs-built_in">plot</span>(y,bb1)<br>gtext(<span class="hljs-string">&#x27;linear&#x27;</span>)<br><span class="hljs-built_in">hold</span> on;pause<br>a=polyfit(x,f,<span class="hljs-number">3</span>)<br>aa=polyval(a,y)<br><span class="hljs-built_in">plot</span>(y,aa)<br>gtext(<span class="hljs-string">&#x27;曲线拟合&#x27;</span>)<br><span class="hljs-built_in">hold</span> off;pause<br><br><span class="hljs-built_in">figure</span>(<span class="hljs-number">3</span>)<br><br><span class="hljs-built_in">plot</span>(x,f,<span class="hljs-string">&#x27;o&#x27;</span>)<br>gtext(<span class="hljs-string">&#x27;已知数据点&#x27;</span>)<br><span class="hljs-built_in">hold</span> on;pause<br>bb1=interp1(x,f,y,<span class="hljs-string">&#x27;spline&#x27;</span>)<br><span class="hljs-built_in">plot</span>(y,bb1)<br>gtext(<span class="hljs-string">&#x27;spline&#x27;</span>)<br><span class="hljs-built_in">hold</span> on;pause<br>a=polyfit(x,f,<span class="hljs-number">3</span>)<br>aa=polyval(a,y)<br><span class="hljs-built_in">plot</span>(y,aa)<br>gtext(<span class="hljs-string">&#x27;曲线拟合&#x27;</span>)<br><span class="hljs-built_in">hold</span> off;pause<br></code></pre></div></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/SgtPepperr/ImgStg/master/20220128131850.png"></p><h2 id="四、用matlab解拟合问题"><a href="#四、用matlab解拟合问题" class="headerlink" title="四、用matlab解拟合问题"></a>四、用matlab解拟合问题</h2><h3 id="1-线性最小二乘拟合"><a href="#1-线性最小二乘拟合" class="headerlink" title="1. 线性最小二乘拟合"></a>1. 线性最小二乘拟合</h3><p><img src="https://raw.githubusercontent.com/SgtPepperr/ImgStg/master/20220128132424.png"></p><h4 id="例子一："><a href="#例子一：" class="headerlink" title="例子一："></a>例子一：</h4><p><img src="https://raw.githubusercontent.com/SgtPepperr/ImgStg/master/20220128132556.png"></p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-comment">%多项式拟合方法</span><br>   x=<span class="hljs-number">0</span>:<span class="hljs-number">0.1</span>:<span class="hljs-number">1</span>;<br>   y=[<span class="hljs-number">-0.447</span> <span class="hljs-number">1.978</span> <span class="hljs-number">3.28</span> <span class="hljs-number">6.16</span> <span class="hljs-number">7.08</span> <span class="hljs-number">7.34</span> <span class="hljs-number">7.66</span> <span class="hljs-number">9.56</span> <span class="hljs-number">9.48</span> <span class="hljs-number">9.30</span> <span class="hljs-number">11.2</span>];<br>   A=polyfit(x,y,<span class="hljs-number">2</span>)<br>   z=polyval(A,x);<br>   <span class="hljs-built_in">plot</span>(x,y,<span class="hljs-string">&#x27;k+&#x27;</span>,x,z,<span class="hljs-string">&#x27;r&#x27;</span>)<br><span class="hljs-comment">%超定方程解法</span><br>  x=<span class="hljs-number">0</span>:<span class="hljs-number">0.1</span>:<span class="hljs-number">1</span>;<br>  y=[<span class="hljs-number">-0.447</span> <span class="hljs-number">1.978</span> <span class="hljs-number">3.28</span> <span class="hljs-number">6.16</span> <span class="hljs-number">7.08</span> <span class="hljs-number">7.34</span> <span class="hljs-number">7.66</span> <span class="hljs-number">9.56</span> <span class="hljs-number">9.48</span> <span class="hljs-number">9.30</span> <span class="hljs-number">11.2</span>];<br><span class="hljs-comment">%x&#x27;代表x的转置</span><br>  R=[(x.^<span class="hljs-number">2</span>)&#x27; x&#x27; <span class="hljs-built_in">ones</span>(<span class="hljs-number">11</span>,<span class="hljs-number">1</span>)];<br>  A=R\y&#x27;<br></code></pre></div></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="2-非线性最小二乘拟合"><a href="#2-非线性最小二乘拟合" class="headerlink" title="2. 非线性最小二乘拟合"></a>2. 非线性最小二乘拟合</h3><p><img src="https://raw.githubusercontent.com/SgtPepperr/ImgStg/master/20220128132806.png"></p><blockquote><p>非线性最小二乘拟合有两种基本函数，以下用两个例子来分别介绍函数的实现。</p></blockquote><p><img src="https://raw.githubusercontent.com/SgtPepperr/ImgStg/master/20220128132954.png"></p><h4 id="1-lsqcurvefit"><a href="#1-lsqcurvefit" class="headerlink" title="(1).lsqcurvefit"></a>(1).lsqcurvefit</h4><p><img src="https://raw.githubusercontent.com/SgtPepperr/ImgStg/master/20220128133109.png"></p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-comment">%编写M文件 curvefun1.m</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>=<span class="hljs-title">curvefun1</span><span class="hljs-params">(x,tdata)</span></span><br>    f=x(<span class="hljs-number">1</span>)+x(<span class="hljs-number">2</span>)*<span class="hljs-built_in">exp</span>(<span class="hljs-number">-0.02</span>*x(<span class="hljs-number">3</span>)*tdata)   <br>                   <span class="hljs-comment">% x(1)=a; x(2)=b,x(3)=k;</span><br><span class="hljs-comment">%输入命令</span><br>clear<br>  tdata=<span class="hljs-number">100</span>:<span class="hljs-number">100</span>:<span class="hljs-number">1000</span><br>  cdata=<span class="hljs-number">1e03</span>*[<span class="hljs-number">4.54</span>,<span class="hljs-number">4.99</span>,<span class="hljs-number">5.35</span>,<span class="hljs-number">5.65</span>,<span class="hljs-number">5.90</span>,<span class="hljs-number">6.10</span>,<span class="hljs-number">6.26</span>,<span class="hljs-number">6.39</span>,<span class="hljs-number">6.50</span>,<span class="hljs-number">6.59</span>];<br>  x0=[<span class="hljs-number">0.2</span>,<span class="hljs-number">0.05</span>,<span class="hljs-number">0.05</span>];<br>  x=lsqcurvefit(<span class="hljs-string">&#x27;curvefun1&#x27;</span>,x0,tdata,cdata)<br>  f=curvefun1(x,tdata)  <br><br> <span class="hljs-built_in">figure</span><br> <span class="hljs-built_in">plot</span>(tdata,cdata,<span class="hljs-string">&#x27;r*&#x27;</span>)<br> <span class="hljs-built_in">hold</span> on<br> <span class="hljs-built_in">plot</span>(tdata,f,<span class="hljs-string">&#x27;bO&#x27;</span>)<br> <span class="hljs-built_in">hold</span> on<br> t=<span class="hljs-number">100</span>:<span class="hljs-number">0.1</span>:<span class="hljs-number">1000</span>;<br> y=x(<span class="hljs-number">1</span>)+x(<span class="hljs-number">2</span>)*<span class="hljs-built_in">exp</span>(<span class="hljs-number">-0.02</span>*x(<span class="hljs-number">3</span>)*t);  <br> <span class="hljs-built_in">plot</span>(t,y,<span class="hljs-string">&#x27;b&#x27;</span>)<br></code></pre></div></td></tr></table></figure><h4 id="2-lsqnonlin"><a href="#2-lsqnonlin" class="headerlink" title="(2).lsqnonlin"></a>(2).lsqnonlin</h4><p><img src="https://raw.githubusercontent.com/SgtPepperr/ImgStg/master/20220128133459.png"></p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-comment">%编写M文件 curvefun2.m,cdata,tdata值提前写入function中</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>=<span class="hljs-title">curvefun2</span><span class="hljs-params">(x)</span></span><br>tdata=<span class="hljs-number">100</span>:<span class="hljs-number">100</span>:<span class="hljs-number">1000</span>;<br>cdata=<span class="hljs-number">1e03</span>*[<span class="hljs-number">4.54</span>,<span class="hljs-number">4.99</span>,<span class="hljs-number">5.35</span>,<span class="hljs-number">5.65</span>,<span class="hljs-number">5.90</span>,<span class="hljs-number">6.10</span>,<span class="hljs-number">6.26</span>,<span class="hljs-number">6.39</span>,<span class="hljs-number">6.50</span>,<span class="hljs-number">6.59</span>];<br>f=x(<span class="hljs-number">1</span>)+x(<span class="hljs-number">2</span>)*<span class="hljs-built_in">exp</span>(<span class="hljs-number">-0.02</span>*x(<span class="hljs-number">3</span>)*tdata)-cdata<br><br><br><span class="hljs-comment">%键入命令</span><br>clear<br>x0=[<span class="hljs-number">0.2</span>,<span class="hljs-number">0.05</span>,<span class="hljs-number">0.05</span>];<br>  x=lsqnonlin(<span class="hljs-string">&#x27;curvefun2&#x27;</span>,x0)<br>  f= curvefun2(x)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python学习（四）：函数使用进阶</title>
    <link href="/2022/01/22/python%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/2022/01/22/python%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="python学习（四）：函数应用进阶"><a href="#python学习（四）：函数应用进阶" class="headerlink" title="python学习（四）：函数应用进阶"></a>python学习（四）：函数应用进阶</h2><p>本篇博客主要介绍了</p><ol><li>Lambda函数</li><li>装饰器</li><li>函数实例</li></ol><p>内容整理和修改自骆昊老师的github_python100天教学。</p><h3 id="一、Lambda函数"><a href="#一、Lambda函数" class="headerlink" title="一、Lambda函数"></a>一、Lambda函数</h3><p>在使用高阶函数的时候，如果作为参数或者返回值的函数本身非常简单，一行代码就能够完成，那么我们可以使用<strong>Lambda函数</strong>来表示。Python中的Lambda函数是没有的名字函数，所以很多人也把它叫做<strong>匿名函数</strong>，匿名函数只能有一行代码，代码中的表达式产生的运算结果就是这个匿名函数的返回值。之前代码中的<code>is_even</code>和<code>square</code>函数都只有一行代码，我们可以用Lambda函数来替换掉它们，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python">numbers1 = [<span class="hljs-number">35</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">99</span>, <span class="hljs-number">60</span>, <span class="hljs-number">52</span>]<br>numbers2 = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x ** <span class="hljs-number">2</span>, <span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>, numbers1)))<br><span class="hljs-built_in">print</span>(numbers2)    <span class="hljs-comment"># [144, 64, 3600, 2704]</span><br></code></pre></div></td></tr></table></figure><p>通过上面的代码可以看出，定义Lambda函数的关键字是<code>lambda</code>，后面跟函数的参数，如果有多个参数用逗号进行分隔；冒号后面的部分就是函数的执行体，通常是一个表达式，表达式的运算结果就是Lambda函数的返回值，不需要写<code>return</code> 关键字。</p><p>如果需要使用加减乘除这种简单的二元函数，也可以用Lambda函数来书写，例如调用上面的<code>calc</code>函数时，可以通过传入Lambda函数来作为<code>op</code>参数的参数值。当然，<code>op</code>参数也可以有默认值，例如我们可以用一个代表加法运算的Lambda函数来作为<code>op</code>参数的默认值。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">calc</span>(<span class="hljs-params">*args, init_value=<span class="hljs-number">0</span>, op=<span class="hljs-keyword">lambda</span> x, y: x + y, **kwargs</span>):</span><br>    result = init_value<br>    <span class="hljs-keyword">for</span> arg <span class="hljs-keyword">in</span> args:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(arg) <span class="hljs-keyword">in</span> (<span class="hljs-built_in">int</span>, <span class="hljs-built_in">float</span>):<br>            result = op(result, arg)<br>    <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> kwargs.values():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(value) <span class="hljs-keyword">in</span> (<span class="hljs-built_in">int</span>, <span class="hljs-built_in">float</span>):<br>            result = op(result, value)<br>    <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-comment"># 调用calc函数，使用init_value和op的默认值</span><br><span class="hljs-built_in">print</span>(calc(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, x=<span class="hljs-number">4</span>, y=<span class="hljs-number">5</span>))    <span class="hljs-comment"># 15</span><br><span class="hljs-comment"># 调用calc函数，通过lambda函数给op参数赋值</span><br><span class="hljs-built_in">print</span>(calc(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, x=<span class="hljs-number">4</span>, y=<span class="hljs-number">5</span>, init_value=<span class="hljs-number">1</span>, op=<span class="hljs-keyword">lambda</span> x, y: x * y))    <span class="hljs-comment"># 120</span><br></code></pre></div></td></tr></table></figure><blockquote><p><strong>提示</strong>：注意上面的代码中的<code>calc</code>函数，它同时使用了可变参数、关键字参数、命名关键字参数，其中命名关键字参数要放在可变参数和关键字参数之间，传参时先传入可变参数，关键字参数和命名关键字参数的先后顺序并不重要。</p></blockquote><p>有很多函数在Python中用一行代码就能实现，我们可以用Lambda函数来定义这些函数，调用Lambda函数就跟调用普通函数一样，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> operator, functools<br><br><span class="hljs-comment"># 一行代码定义求阶乘的函数</span><br>fac = <span class="hljs-keyword">lambda</span> num: functools.reduce(operator.mul, <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, num + <span class="hljs-number">1</span>), <span class="hljs-number">1</span>)<br><span class="hljs-comment"># 一行代码定义判断素数的函数</span><br>is_prime = <span class="hljs-keyword">lambda</span> x: x &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">all</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> f: x % f, <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">int</span>(x ** <span class="hljs-number">0.5</span>) + <span class="hljs-number">1</span>)))<br><br><span class="hljs-comment"># 调用Lambda函数</span><br><span class="hljs-built_in">print</span>(fac(<span class="hljs-number">10</span>))        <span class="hljs-comment"># 3628800</span><br><span class="hljs-built_in">print</span>(is_prime(<span class="hljs-number">9</span>))    <span class="hljs-comment"># False</span><br></code></pre></div></td></tr></table></figure><blockquote><p><strong>提示1</strong>：上面使用的<code>reduce</code>函数是Python标准库<code>functools</code>模块中的函数，它可以实现对数据的归约操作，通常情况下，<strong>过滤</strong>（filter）、<strong>映射</strong>（map）和<strong>归约</strong>（reduce）是处理数据中非常关键的三个步骤，而Python的标准库也提供了对这三个操作的支持。</p><p><strong>提示2</strong>：上面使用的<code>all</code>函数是Python内置函数，如果传入的序列中所有布尔值都是<code>True</code>，<code>all</code>函数就返回<code>True</code>，否则<code>all</code>函数就返回<code>False</code>。</p></blockquote><h3 id="二、装饰器"><a href="#二、装饰器" class="headerlink" title="二、装饰器"></a>二、装饰器</h3><p>装饰器是Python中<strong>用一个函数装饰另外一个函数或类并为其提供额外功能</strong>的语法现象。装饰器本身是一个函数，它的参数是被装饰的函数或类，它的返回值是一个带有装饰功能的函数。很显然，装饰器是一个高阶函数，它的参数和返回值都是函数。下面我们先通过一个简单的例子来说明装饰器的写法和作用，假设已经有名为<code>downlaod</code>和<code>upload</code>的两个函数，分别用于文件的上传和下载，下面的代码用休眠一段随机时间的方式模拟了下载和上传需要花费的时间，并没有联网做上传下载。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">download</span>(<span class="hljs-params">filename</span>):</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;开始下载<span class="hljs-subst">&#123;filename&#125;</span>.&#x27;</span>)<br>    time.sleep(random.randint(<span class="hljs-number">2</span>, <span class="hljs-number">6</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;filename&#125;</span>下载完成.&#x27;</span>)<br><br>    <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">upload</span>(<span class="hljs-params">filename</span>):</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;开始上传<span class="hljs-subst">&#123;filename&#125;</span>.&#x27;</span>)<br>    time.sleep(random.randint(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;filename&#125;</span>上传完成.&#x27;</span>)<br><br>    <br>download(<span class="hljs-string">&#x27;MySQL从删库到跑路.avi&#x27;</span>)<br>upload(<span class="hljs-string">&#x27;Python从入门到住院.pdf&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>现在我们希望知道调用<code>download</code>和<code>upload</code>函数做文件上传下载到底用了多少时间，这个应该如何实现呢？相信很多小伙伴已经想到了，我们可以在函数开始执行的时候记录一个时间，在函数调用结束后记录一个时间，两个时间相减就可以计算出下载或上传的时间，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python">start = time.time()<br>download(<span class="hljs-string">&#x27;MySQL从删库到跑路.avi&#x27;</span>)<br>end = time.time()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;花费时间: <span class="hljs-subst">&#123;end - start:<span class="hljs-number">.3</span>f&#125;</span>秒&#x27;</span>)<br>start = time.time()<br>upload(<span class="hljs-string">&#x27;Python从入门到住院.pdf&#x27;</span>)<br>end = time.time()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;花费时间: <span class="hljs-subst">&#123;end - start:<span class="hljs-number">.3</span>f&#125;</span>秒&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>通过上面的代码，我们可以得到下载和上传花费的时间，但不知道大家是否注意到，上面记录时间、计算和显示执行时间的代码都是重复代码。有编程经验的人都知道，<strong>重复的代码是万恶之源</strong>，那么有没有办法在不写重复代码的前提下，用一种简单优雅的方式记录下函数的执行时间呢？在Python中，装饰器就是解决这类问题的最佳选择。我们可以把记录函数执行时间的功能封装到一个装饰器中，在有需要的地方直接使用这个装饰器就可以了，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-comment"># 定义装饰器函数，它的参数是被装饰的函数或类</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">record_time</span>(<span class="hljs-params">func</span>):</span><br>    <br>    <span class="hljs-comment"># 定义一个带装饰功能（记录被装饰函数的执行时间）的函数</span><br>    <span class="hljs-comment"># 因为不知道被装饰的函数有怎样的参数所以使用*args和**kwargs接收所有参数</span><br>    <span class="hljs-comment"># 在Python中函数可以嵌套的定义（函数中可以再定义函数）</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):</span><br>        <span class="hljs-comment"># 在执行被装饰的函数之前记录开始时间</span><br>        start = time.time()<br>        <span class="hljs-comment"># 执行被装饰的函数并获取返回值</span><br>        result = func(*args, **kwargs)<br>        <span class="hljs-comment"># 在执行被装饰的函数之后记录结束时间</span><br>        end = time.time()<br>        <span class="hljs-comment"># 计算和显示被装饰函数的执行时间</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;func.__name__&#125;</span>执行时间: <span class="hljs-subst">&#123;end - start:<span class="hljs-number">.3</span>f&#125;</span>秒&#x27;</span>)<br>        <span class="hljs-comment"># 返回被装饰函数的返回值（装饰器通常不会改变被装饰函数的执行结果）</span><br>        <span class="hljs-keyword">return</span> result<br>    <br>    <span class="hljs-comment"># 返回带装饰功能的wrapper函数</span><br>    <span class="hljs-keyword">return</span> wrapper<br></code></pre></div></td></tr></table></figure><p>使用上面的装饰器函数有两种方式，第一种方式就是直接调用装饰器函数，传入被装饰的函数并获得返回值，我们可以用这个返回值直接覆盖原来的函数，那么在调用时就已经获得了装饰器提供的额外的功能（记录执行时间），大家可以试试下面的代码就明白了。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python">download = record_time(download)<br>upload = record_time(upload)<br>download(<span class="hljs-string">&#x27;MySQL从删库到跑路.avi&#x27;</span>)<br>upload(<span class="hljs-string">&#x27;Python从入门到住院.pdf&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>上面的代码中已经没有重复代码了，虽然写装饰器会花费一些心思，但是这是一个一劳永逸的骚操作，如果还有其他的函数也需要记录执行时间，按照上面的代码如法炮制即可。</p><p>在Python中，使用装饰器很有更为便捷的<strong>语法糖</strong>（编程语言中添加的某种语法，这种语法对语言的功能没有影响，但是使用更加方法，代码的可读性也更强，我们将其称之为“语法糖”或“糖衣语法”），可以用<code>@装饰器函数</code>将装饰器函数直接放在被装饰的函数上，效果跟上面的代码相同，下面是完整的代码。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">record_time</span>(<span class="hljs-params">func</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):</span><br>        start = time.time()<br>        result = func(*args, **kwargs)<br>        end = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;func.__name__&#125;</span>执行时间: <span class="hljs-subst">&#123;end - start:<span class="hljs-number">.3</span>f&#125;</span>秒&#x27;</span>)<br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">return</span> wrapper<br><br><br><span class="hljs-meta">@record_time</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">download</span>(<span class="hljs-params">filename</span>):</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;开始下载<span class="hljs-subst">&#123;filename&#125;</span>.&#x27;</span>)<br>    time.sleep(random.randint(<span class="hljs-number">2</span>, <span class="hljs-number">6</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;filename&#125;</span>下载完成.&#x27;</span>)<br><br><br><span class="hljs-meta">@record_time</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">upload</span>(<span class="hljs-params">filename</span>):</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;开始上传<span class="hljs-subst">&#123;filename&#125;</span>.&#x27;</span>)<br>    time.sleep(random.randint(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;filename&#125;</span>上传完成.&#x27;</span>)<br><br><br>download(<span class="hljs-string">&#x27;MySQL从删库到跑路.avi&#x27;</span>)<br>upload(<span class="hljs-string">&#x27;Python从入门到住院.pdf&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>上面的代码，我们通过装饰器语法糖为<code>download</code>和<code>upload</code>函数添加了装饰器，这样调用<code>download</code>和<code>upload</code>函数时，会记录下函数的执行时间。事实上，被装饰后的<code>download</code>和<code>upload</code>函数是我们在装饰器<code>record_time</code>中返回的<code>wrapper</code>函数，调用它们其实就是在调用<code>wrapper</code>函数，所以拥有了记录函数执行时间的功能。</p><p>如果希望取消装饰器的作用，那么在定义装饰器函数的时候，需要做一些额外的工作。Python标准库<code>functools</code>模块的<code>wraps</code>函数也是一个装饰器，我们将它放在<code>wrapper</code>函数上，这个装饰器可以帮我们保留被装饰之前的函数，这样在需要取消装饰器时，可以通过被装饰函数的<code>__wrapped__</code>属性获得被装饰之前的函数。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">record_time</span>(<span class="hljs-params">func</span>):</span><br><br><span class="hljs-meta">    @wraps(<span class="hljs-params">func</span>)</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):</span><br>        start = time.time()<br>        result = func(*args, **kwargs)<br>        end = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;func.__name__&#125;</span>执行时间: <span class="hljs-subst">&#123;end - start:<span class="hljs-number">.3</span>f&#125;</span>秒&#x27;</span>)<br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">return</span> wrapper<br><br><br><span class="hljs-meta">@record_time</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">download</span>(<span class="hljs-params">filename</span>):</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;开始下载<span class="hljs-subst">&#123;filename&#125;</span>.&#x27;</span>)<br>    time.sleep(random.randint(<span class="hljs-number">2</span>, <span class="hljs-number">6</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;filename&#125;</span>下载完成.&#x27;</span>)<br><br><br><span class="hljs-meta">@record_time</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">upload</span>(<span class="hljs-params">filename</span>):</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;开始上传<span class="hljs-subst">&#123;filename&#125;</span>.&#x27;</span>)<br>    time.sleep(random.randint(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;filename&#125;</span>上传完成.&#x27;</span>)<br><br><br>download(<span class="hljs-string">&#x27;MySQL从删库到跑路.avi&#x27;</span>)<br>upload(<span class="hljs-string">&#x27;Python从入门到住院.pdf&#x27;</span>)<br><span class="hljs-comment"># 取消装饰器</span><br>download.__wrapped__(<span class="hljs-string">&#x27;MySQL必知必会.pdf&#x27;</span>)<br>upload = upload.__wrapped__<br>upload(<span class="hljs-string">&#x27;Python从新手到大师.pdf&#x27;</span>)<br></code></pre></div></td></tr></table></figure><h3 id="三、函数实例"><a href="#三、函数实例" class="headerlink" title="三、函数实例"></a>三、函数实例</h3><h4 id="案例1：设计一个生成验证码的函数。"><a href="#案例1：设计一个生成验证码的函数。" class="headerlink" title="案例1：设计一个生成验证码的函数。"></a>案例1：设计一个生成验证码的函数。</h4><blockquote><p><strong>说明</strong>：验证码由数字和英文大小写字母构成，长度可以用参数指定。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> string<br><br>ALL_CHARS = string.digits + string.ascii_letters<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generate_code</span>(<span class="hljs-params">code_len=<span class="hljs-number">4</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;生成指定长度的验证码</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    :param code_len: 验证码的长度(默认4个字符)</span><br><span class="hljs-string">    :return: 由大小写英文字母和数字构成的随机验证码字符串</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(random.choices(ALL_CHARS, k=code_len))<br></code></pre></div></td></tr></table></figure><p>可以用下面的代码生成10组随机验证码来测试上面的函数。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(generate_code()) <br></code></pre></div></td></tr></table></figure><blockquote><p><strong>说明</strong>：<code>random</code>模块的<code>sample</code>和<code>choices</code>函数都可以实现随机抽样，<code>sample</code>实现无放回抽样，这意味着抽样取出的字符是不重复的；<code>choices</code>实现有放回抽样，这意味着可能会重复选中某些字符。这两个函数的第一个参数代表抽样的总体，而参数<code>k</code>代表抽样的数量。</p></blockquote><h4 id="案例2：设计一个函数返回给定文件的后缀名。"><a href="#案例2：设计一个函数返回给定文件的后缀名。" class="headerlink" title="案例2：设计一个函数返回给定文件的后缀名。"></a>案例2：设计一个函数返回给定文件的后缀名。</h4><blockquote><p><strong>说明</strong>：文件名通常是一个字符串，而文件的后缀名指的是文件名中最后一个<code>.</code>后面的部分，也称为文件的扩展名，它是某些操作系统用来标记文件类型的一种机制，例如在Windows系统上，后缀名<code>exe</code>表示这是一个可执行程序，而后缀名<code>txt</code>表示这是一个纯文本文件。需要注意的是，在Linux和macOS系统上，文件名可以以<code>.</code>开头，表示这是一个隐藏文件，像<code>.gitignore</code>这样的文件名，<code>.</code>后面并不是后缀名，这个文件没有后缀名或者说后缀名为<code>&#39;&#39;</code>。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_suffix</span>(<span class="hljs-params">filename, ignore_dot=<span class="hljs-literal">True</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;获取文件名的后缀名</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    :param filename: 文件名</span><br><span class="hljs-string">    :param ignore_dot: 是否忽略后缀名前面的点</span><br><span class="hljs-string">    :return: 文件的后缀名</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 从字符串中逆向查找.出现的位置</span><br>    pos = filename.rfind(<span class="hljs-string">&#x27;.&#x27;</span>)<br>    <span class="hljs-comment"># 通过切片操作从文件名中取出后缀名</span><br>    <span class="hljs-keyword">if</span> pos &lt;= <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">return</span> filename[pos + <span class="hljs-number">1</span>:] <span class="hljs-keyword">if</span> ignore_dot <span class="hljs-keyword">else</span> filename[pos:]<br></code></pre></div></td></tr></table></figure><p>可以用下面的代码对上面的函数做一个简单的测验。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-built_in">print</span>(get_suffix(<span class="hljs-string">&#x27;readme.txt&#x27;</span>))       <span class="hljs-comment"># txt</span><br><span class="hljs-built_in">print</span>(get_suffix(<span class="hljs-string">&#x27;readme.txt.md&#x27;</span>))    <span class="hljs-comment"># md</span><br><span class="hljs-built_in">print</span>(get_suffix(<span class="hljs-string">&#x27;.readme&#x27;</span>))          <span class="hljs-comment">#</span><br><span class="hljs-built_in">print</span>(get_suffix(<span class="hljs-string">&#x27;readme.&#x27;</span>))          <span class="hljs-comment">#</span><br><span class="hljs-built_in">print</span>(get_suffix(<span class="hljs-string">&#x27;readme&#x27;</span>))           <span class="hljs-comment">#</span><br></code></pre></div></td></tr></table></figure><p>上面的<code>get_suffix</code>函数还有一个更为便捷的实现方式，就是直接使用<code>os.path</code>模块的<code>splitext</code>函数，这个函数会将文件名拆分成带路径的文件名和扩展名两个部分，然后返回一个二元组，二元组中的第二个元素就是文件的后缀名（包含<code>.</code>），如果要去掉后缀名中的<code>.</code>，可以做一个字符串的切片操作，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> os.path <span class="hljs-keyword">import</span> splitext<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_suffix</span>(<span class="hljs-params">filename, ignore_dot=<span class="hljs-literal">True</span></span>):</span><br>    <span class="hljs-keyword">return</span> splitext(filename)[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>:]<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python学习（三）：函数进阶</title>
    <link href="/2022/01/22/python%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2022/01/22/python%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="python学习（三）：函数进阶"><a href="#python学习（三）：函数进阶" class="headerlink" title="python学习（三）：函数进阶"></a>python学习（三）：函数进阶</h2><p>本篇博客主要介绍了</p><ol><li>函数参数的使用</li><li>高阶函数介绍</li><li>高阶函数使用</li></ol><p>内容整理和修改自骆昊老师的github_python100天教学。</p><h3 id="一、函数参数"><a href="#一、函数参数" class="headerlink" title="一、函数参数"></a>一、函数参数</h3><p>函数是绝大多数编程语言中都支持的一个代码的&quot;构建块&quot;，但是Python中的函数与其他语言中的函数还是有很多不太相同的地方，其中一个显著的区别就是Python对函数参数的处理。在Python中，函数的参数可以有默认值，也支持使用可变参数，所以Python并不需要像其他语言一样支持<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD">函数的重载</a>，因为我们在定义一个函数的时候可以让它有多种不同的使用方式。</p><h4 id="1-1-参数默认"><a href="#1-1-参数默认" class="headerlink" title="1.1 参数默认"></a>1.1 参数默认</h4><p>在函数定义的时候我们可以给参数提供一个默认值，这样我们在不提供给定参数的时候可以使用默认参数进行函数运算。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">a=<span class="hljs-number">0</span>, b=<span class="hljs-number">0</span>, c=<span class="hljs-number">0</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;三个数相加求和&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> a + b + c<br><br><br><span class="hljs-comment"># 调用add函数，没有传入参数，那么a、b、c都使用默认值0</span><br><span class="hljs-built_in">print</span>(add())         <span class="hljs-comment"># 0</span><br><span class="hljs-comment"># 调用add函数，传入一个参数，那么该参数赋值给变量a, 变量b和c使用默认值0</span><br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>))        <span class="hljs-comment"># 1</span><br><span class="hljs-comment"># 调用add函数，传入两个参数，1和2分别赋值给变量a和b，变量c使用默认值0</span><br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))     <span class="hljs-comment"># 3</span><br><span class="hljs-comment"># 调用add函数，传入三个参数，分别赋值给a、b、c三个变量</span><br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))  <span class="hljs-comment"># 6</span><br><span class="hljs-comment"># 传递参数时可以不按照设定的顺序进行传递，但是要用“参数名=参数值”的形式</span><br><span class="hljs-built_in">print</span>(add(c=<span class="hljs-number">50</span>, a=<span class="hljs-number">100</span>, b=<span class="hljs-number">200</span>))    <span class="hljs-comment"># 350</span><br></code></pre></div></td></tr></table></figure><blockquote><p><strong>注意</strong>：带默认值的参数必须放在不带默认值的参数之后，否则将产生<code>SyntaxError</code>错误，错误消息是：<code>non-default argument follows default argument</code>，翻译成中文的意思是“没有默认值的参数放在了带默认值的参数后面”。</p></blockquote><h4 id="1-2-可变参数"><a href="#1-2-可变参数" class="headerlink" title="1.2 可变参数"></a>1.2 可变参数</h4><p>接下来，我们还可以实现一个对任意多个数求和的<code>add</code>函数，因为Python语言中的函数可以通过星号表达式语法来支持可变参数。所谓可变参数指的是在调用函数时，可以向函数传入<code>0</code>个或任意多个参数。将来我们以团队协作的方式开发商业项目时，很有可能要设计函数给其他人使用，但有的时候我们并不知道函数的调用者会向该函数传入多少个参数，这个时候可变参数就可以派上用场。下面的代码演示了用可变参数实现对任意多个数求和的<code>add</code>函数。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><br><span class="hljs-comment"># 用星号表达式来表示args可以接收0个或任意多个参数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">*args</span>):</span><br>    total = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 可变参数可以放在for循环中取出每个参数的值</span><br>    <span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> args:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(val) <span class="hljs-keyword">in</span> (<span class="hljs-built_in">int</span>, <span class="hljs-built_in">float</span>):<br>            total += val<br>    <span class="hljs-keyword">return</span> total<br><br><br><span class="hljs-comment"># 在调用add函数时可以传入0个或任意多个参数</span><br><span class="hljs-built_in">print</span>(add())<br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>))<br></code></pre></div></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h4 id="1-3-关键字参数"><a href="#1-3-关键字参数" class="headerlink" title="1.3 关键字参数"></a>1.3 关键字参数</h4><p>下面是一个判断传入的三条边长能否构成三角形的函数，在调用函数传入参数时，我们可以指定参数名，也可以不指定参数名，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_triangle</span>(<span class="hljs-params">a, b, c</span>):</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;a = <span class="hljs-subst">&#123;a&#125;</span>, b = <span class="hljs-subst">&#123;b&#125;</span>, c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">return</span> a + b &gt; c <span class="hljs-keyword">and</span> b + c &gt; a <span class="hljs-keyword">and</span> a + c &gt; b<br><br><br><span class="hljs-comment"># 调用函数传入参数不指定参数名按位置对号入座</span><br><span class="hljs-built_in">print</span>(is_triangle(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-comment"># 调用函数通过“参数名=参数值”的形式按顺序传入参数</span><br><span class="hljs-built_in">print</span>(is_triangle(a=<span class="hljs-number">1</span>, b=<span class="hljs-number">2</span>, c=<span class="hljs-number">3</span>))<br><span class="hljs-comment"># 调用函数通过“参数名=参数值”的形式不按顺序传入参数</span><br><span class="hljs-built_in">print</span>(is_triangle(c=<span class="hljs-number">3</span>, a=<span class="hljs-number">1</span>, b=<span class="hljs-number">2</span>))<br></code></pre></div></td></tr></table></figure><p>在没有特殊处理的情况下，函数的参数都是<strong>位置参数</strong>，也就意味着传入参数的时候对号入座即可，如上面代码的第7行所示，传入的参数值<code>1</code>、<code>2</code>、<code>3</code>会依次赋值给参数<code>a</code>、<code>b</code>、<code>c</code>。当然，也可以通过<code>参数名=参数值</code>的方式传入函数所需的参数，因为指定了参数名，传入参数的顺序可以进行调整，如上面代码的第9行和第11行所示。</p><h5 id="1-3-1-命名关键字参数"><a href="#1-3-1-命名关键字参数" class="headerlink" title="1.3.1 命名关键字参数"></a>1.3.1 命名关键字参数</h5><p>调用函数时，如果希望函数的调用者必须以<code>参数名=参数值</code>的方式传参，可以用<strong>命名关键字参数</strong>（keyword-only argument）取代位置参数。所谓命名关键字参数，是在函数的参数列表中，写在<code>*</code>之后的参数，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_triangle</span>(<span class="hljs-params">*, a, b, c</span>):</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;a = <span class="hljs-subst">&#123;a&#125;</span>, b = <span class="hljs-subst">&#123;b&#125;</span>, c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">return</span> a + b &gt; c <span class="hljs-keyword">and</span> b + c &gt; a <span class="hljs-keyword">and</span> a + c &gt; b<br><br><br><span class="hljs-comment"># TypeError: is_triangle() takes 0 positional arguments but 3 were given</span><br><span class="hljs-comment"># print(is_triangle(3, 4, 5))</span><br><span class="hljs-comment"># 传参时必须使用“参数名=参数值”的方式，位置不重要</span><br><span class="hljs-built_in">print</span>(is_triangle(a=<span class="hljs-number">3</span>, b=<span class="hljs-number">4</span>, c=<span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(is_triangle(c=<span class="hljs-number">5</span>, b=<span class="hljs-number">4</span>, a=<span class="hljs-number">3</span>))<br></code></pre></div></td></tr></table></figure><blockquote><p><strong>注意</strong>：上面的<code>is_triangle</code>函数，参数列表中的<code>*</code>是一个分隔符，<code>*</code>前面的参数都是位置参数，而<code>*</code>后面的参数就是命名关键字参数。</p></blockquote><h5 id="1-3-2-可变参数和关键字参数"><a href="#1-3-2-可变参数和关键字参数" class="headerlink" title="1.3.2 可变参数和关键字参数"></a>1.3.2 可变参数和关键字参数</h5><p>我们之前讲过在函数的参数列表中可以使用<strong>可变参数</strong><code>*args</code>来接收任意数量的参数，但是我们需要看看，<code>*args</code>是否能够接收带参数名的参数。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">calc</span>(<span class="hljs-params">*args</span>):</span><br>    result = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> arg <span class="hljs-keyword">in</span> args:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(arg) <span class="hljs-keyword">in</span> (<span class="hljs-built_in">int</span>, <span class="hljs-built_in">float</span>):<br>            result += arg<br>    <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-built_in">print</span>(calc(a=<span class="hljs-number">1</span>, b=<span class="hljs-number">2</span>, c=<span class="hljs-number">3</span>))<br></code></pre></div></td></tr></table></figure><p>执行上面的代码会引发<code>TypeError</code>错误，错误消息为<code>calc() got an unexpected keyword argument &#39;a&#39;</code>，由此可见，<code>*args</code>并不能处理带参数名的参数。我们在设计函数时，如果既不知道调用者会传入的参数个数，也不知道调用者会不会指定参数名，那么同时使用可变参数和<strong>关键字参数</strong>。关键字参数会将传入的带参数名的参数组装成一个字典，参数名就是字典中键值对的键，而参数值就是字典中键值对的值，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">calc</span>(<span class="hljs-params">*args, **kwargs</span>):</span><br>    result = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> arg <span class="hljs-keyword">in</span> args:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(arg) <span class="hljs-keyword">in</span> (<span class="hljs-built_in">int</span>, <span class="hljs-built_in">float</span>):<br>            result += arg<br>    <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> kwargs.values():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(value) <span class="hljs-keyword">in</span> (<span class="hljs-built_in">int</span>, <span class="hljs-built_in">float</span>):<br>            result += value<br>    <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-built_in">print</span>(calc())                  <span class="hljs-comment"># 0</span><br><span class="hljs-built_in">print</span>(calc(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))           <span class="hljs-comment"># 6</span><br><span class="hljs-built_in">print</span>(calc(a=<span class="hljs-number">1</span>, b=<span class="hljs-number">2</span>, c=<span class="hljs-number">3</span>))     <span class="hljs-comment"># 6</span><br><span class="hljs-built_in">print</span>(calc(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, c=<span class="hljs-number">3</span>, d=<span class="hljs-number">4</span>))    <span class="hljs-comment"># 10</span><br></code></pre></div></td></tr></table></figure><blockquote><p><strong>提示</strong>：<strong>不带参数名的参数（位置参数）必须出现在带参数名的参数（关键字参数）之前</strong>，否则将会引发异常。例如，执行<code>calc(1, 2, c=3, d=4, 5)</code>将会引发<code>SyntaxError</code>错误，错误消息为<code>positional argument follows keyword argument</code>，翻译成中文意思是“位置参数出现在关键字参数之后”。</p></blockquote><h3 id="二、高阶函数介绍"><a href="#二、高阶函数介绍" class="headerlink" title="二、高阶函数介绍"></a>二、高阶函数介绍</h3><p>在面向对象的世界中，一切皆为对象，所以类和函数也是对象。函数的参数和返回值可以是任意类型的对象，这就意味着<strong>函数本身也可以作为函数的参数或返回值</strong>，这就是所谓的<strong>高阶函数</strong>。</p><p>如果我们希望上面的<code>calc</code>函数不仅仅可以做多个参数求和，还可以做多个参数求乘积甚至更多的二元运算，我们就可以使用高阶函数的方式来改写上面的代码，将加法运算从函数中移除掉，具体的做法如下所示。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">calc</span>(<span class="hljs-params">*args, init_value, op, **kwargs</span>):</span><br>    result = init_value<br>    <span class="hljs-keyword">for</span> arg <span class="hljs-keyword">in</span> args:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(arg) <span class="hljs-keyword">in</span> (<span class="hljs-built_in">int</span>, <span class="hljs-built_in">float</span>):<br>            result = op(result, arg)<br>    <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> kwargs.values():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(value) <span class="hljs-keyword">in</span> (<span class="hljs-built_in">int</span>, <span class="hljs-built_in">float</span>):<br>            result = op(result, value)<br>    <span class="hljs-keyword">return</span> result<br></code></pre></div></td></tr></table></figure><p>注意，上面的函数增加了两个参数，其中<code>init_value</code>代表运算的初始值，<code>op</code>代表二元运算函数。经过改造的<code>calc</code>函数不仅仅可以实现多个参数的累加求和，也可以实现多个参数的累乘运算，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">x, y</span>):</span><br>    <span class="hljs-keyword">return</span> x + y<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mul</span>(<span class="hljs-params">x, y</span>):</span><br>    <span class="hljs-keyword">return</span> x * y<br><br><br><span class="hljs-built_in">print</span>(calc(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, init_value=<span class="hljs-number">0</span>, op=add, x=<span class="hljs-number">4</span>, y=<span class="hljs-number">5</span>))      <span class="hljs-comment"># 15</span><br><span class="hljs-built_in">print</span>(calc(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, x=<span class="hljs-number">3</span>, y=<span class="hljs-number">4</span>, z=<span class="hljs-number">5</span>, init_value=<span class="hljs-number">1</span>, op=mul))    <span class="hljs-comment"># 120</span><br></code></pre></div></td></tr></table></figure><p>通过对高阶函数的运用，<code>calc</code>函数不再和加法运算耦合，所以灵活性和通用性会变强，这是一种解耦合的编程技巧，但是最初学者来说可能会稍微有点难以理解。需要注意的是，将函数作为参数和调用函数是有显著的区别的，<strong>调用函数需要在函数名后面跟上圆括号，而把函数作为参数时只需要函数名即可</strong>。上面的代码也可以不用定义<code>add</code>和<code>mul</code>函数，因为Python标准库中的<code>operator</code>模块提供了代表加法运算的<code>add</code>和代表乘法运算的<code>mul</code>函数，我们直接使用即可，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> operator<br><br><span class="hljs-built_in">print</span>(calc(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, init_value=<span class="hljs-number">0</span>, op=operator.add, x=<span class="hljs-number">4</span>, y=<span class="hljs-number">5</span>))      <span class="hljs-comment"># 15</span><br><span class="hljs-built_in">print</span>(calc(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, x=<span class="hljs-number">3</span>, y=<span class="hljs-number">4</span>, z=<span class="hljs-number">5</span>, init_value=<span class="hljs-number">1</span>, op=operator.mul))    <span class="hljs-comment"># 120</span><br></code></pre></div></td></tr></table></figure><p>Python内置函数中有不少高阶函数，我们前面提到过的<code>filter</code>和<code>map</code>函数就是高阶函数，前者可以实现对序列中元素的过滤，后者可以实现对序列中元素的映射，例如我们要去掉一个整数列表中的奇数，并对所有的偶数求平方得到一个新的列表，就可以直接使用这两个函数来做到，具体的做法是如下所示。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_even</span>(<span class="hljs-params">num</span>):</span><br>    <span class="hljs-keyword">return</span> num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">square</span>(<span class="hljs-params">num</span>):</span><br>    <span class="hljs-keyword">return</span> num ** <span class="hljs-number">2</span><br><br><br>numbers1 = [<span class="hljs-number">35</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">99</span>, <span class="hljs-number">60</span>, <span class="hljs-number">52</span>]<br>numbers2 = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(square, <span class="hljs-built_in">filter</span>(is_even, numbers1)))<br><span class="hljs-built_in">print</span>(numbers2)    <span class="hljs-comment"># [144, 64, 3600, 2704]</span><br></code></pre></div></td></tr></table></figure><p>当然，要完成上面代码的功能，也可以使用列表生成式，列表生成式的做法更为简单优雅。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python">numbers1 = [<span class="hljs-number">35</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">99</span>, <span class="hljs-number">60</span>, <span class="hljs-number">52</span>]<br>numbers2 = [num ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> numbers1 <span class="hljs-keyword">if</span> num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(numbers2)    <span class="hljs-comment"># [144, 64, 3600, 2704]</span><br></code></pre></div></td></tr></table></figure><h3 id="三、-常用高阶函数"><a href="#三、-常用高阶函数" class="headerlink" title="三、 常用高阶函数"></a>三、 常用高阶函数</h3><p>主要包括<code>map,reduce,filter</code>三个函数</p><h4 id="3-1-map"><a href="#3-1-map" class="headerlink" title="3.1 map()"></a>3.1 map()</h4><p>我们先看map。<code>map()</code>函数接收两个参数，一个是函数，一个是<code>Iterable</code>，<code>map</code>将传入的函数依次作用到序列的每个元素，并把结果作为新的<code>Iterator</code>返回。</p><p>举例说明，比如我们有一个函数f(x)=$x^2$，要把这个函数作用在一个list <code>[1, 2, 3, 4, 5, 6, 7, 8, 9]</code>上，就可以用<code>map()</code>实现如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ascii">            f(x) = x * x<br><br>                  │<br>                  │<br>  ┌───┬───┬───┬───┼───┬───┬───┬───┐<br>  │   │   │   │   │   │   │   │   │<br>  ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼<br><br>[ 1   2   3   4   5   6   7   8   9 ]<br><br>  │   │   │   │   │   │   │   │   │<br>  │   │   │   │   │   │   │   │   │<br>  ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼<br><br>[ 1   4   9  16  25  36  49  64  81 ]<br></code></pre></div></td></tr></table></figure><p>现在，我们用Python代码实现：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">x</span>):</span><br><span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> x * x<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span>r = <span class="hljs-built_in">map</span>(f, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(r)<br>[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">36</span>, <span class="hljs-number">49</span>, <span class="hljs-number">64</span>, <span class="hljs-number">81</span>]<br></code></pre></div></td></tr></table></figure><p><code>map()</code>传入的第一个参数是<code>f</code>，即函数对象本身。由于结果<code>r</code>是一个<code>Iterator</code>，<code>Iterator</code>是惰性序列，因此通过<code>list()</code>函数让它把整个序列都计算出来并返回一个list。</p><h4 id="3-2-reduce"><a href="#3-2-reduce" class="headerlink" title="3.2 reduce()"></a>3.2 reduce()</h4><p>再看<code>reduce</code>的用法。<code>reduce</code>把一个函数作用在一个序列<code>[x1, x2, x3, ...]</code>上，这个函数必须接收两个参数，<code>reduce</code>把结果继续和序列的下一个元素做累积计算，其效果就是：</p><figure class="highlight llvm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs llvm">reduce(f<span class="hljs-punctuation">,</span> [<span class="hljs-keyword">x</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span><span class="hljs-number">4</span>]) <span class="hljs-operator">=</span> f(f(f(<span class="hljs-keyword">x</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span><span class="hljs-number">2</span>)<span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span><span class="hljs-number">3</span>)<span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span><span class="hljs-number">4</span>)<br></code></pre></div></td></tr></table></figure><p>比方说对一个序列求和，就可以用<code>reduce</code>实现：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">x, y</span>):</span><br><span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> x + y<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span>reduce(add, [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>])<br><span class="hljs-number">25</span><br></code></pre></div></td></tr></table></figure><h4 id="3-3-filter"><a href="#3-3-filter" class="headerlink" title="3.3 filter()"></a>3.3 filter()</h4><p>Python内建的<code>filter()</code>函数用于过滤序列。</p><p>和<code>map()</code>类似，<code>filter()</code>也接收一个函数和一个序列。和<code>map()</code>不同的是，<code>filter()</code>把传入的函数依次作用于每个元素，然后根据返回值是<code>True</code>还是<code>False</code>决定保留还是丢弃该元素。</p><p>例如，在一个list中，删掉偶数，只保留奇数，可以这么写：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_odd</span>(<span class="hljs-params">n</span>):</span><br>    <span class="hljs-keyword">return</span> n % <span class="hljs-number">2</span> == <span class="hljs-number">1</span><br><br><span class="hljs-built_in">list</span>(<span class="hljs-built_in">filter</span>(is_odd, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>]))<br><span class="hljs-comment"># 结果: [1, 5, 9, 15]</span><br></code></pre></div></td></tr></table></figure><p>把一个序列中的空字符串删掉，可以这么写：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">not_empty</span>(<span class="hljs-params">s</span>):</span><br>    <span class="hljs-keyword">return</span> s <span class="hljs-keyword">and</span> s.strip()<br><br><span class="hljs-built_in">list</span>(<span class="hljs-built_in">filter</span>(not_empty, [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;  &#x27;</span>]))<br><span class="hljs-comment"># 结果: [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span><br></code></pre></div></td></tr></table></figure><h4 id="3-4-高阶函数的结合使用"><a href="#3-4-高阶函数的结合使用" class="headerlink" title="3.4 高阶函数的结合使用"></a>3.4 高阶函数的结合使用</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-comment">#生成列表所有偶数的平方的新列表</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_even</span>(<span class="hljs-params">num</span>):</span><br>    <span class="hljs-keyword">return</span> num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">square</span>(<span class="hljs-params">num</span>):</span><br>    <span class="hljs-keyword">return</span> num ** <span class="hljs-number">2</span><br><br><br>numbers1 = [<span class="hljs-number">35</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">99</span>, <span class="hljs-number">60</span>, <span class="hljs-number">52</span>]<br>numbers2 = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(square, <span class="hljs-built_in">filter</span>(is_even, numbers1)))<br><span class="hljs-built_in">print</span>(numbers2)    <span class="hljs-comment"># [144, 64, 3600, 2704]</span><br></code></pre></div></td></tr></table></figure><p>一个<code>str2int</code>的函数表示成：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><br>DIGITS = &#123;<span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;3&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;4&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;5&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;6&#x27;</span>: <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;7&#x27;</span>: <span class="hljs-number">7</span>, <span class="hljs-string">&#x27;8&#x27;</span>: <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;9&#x27;</span>: <span class="hljs-number">9</span>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">str2int</span>(<span class="hljs-params">s</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fn</span>(<span class="hljs-params">x, y</span>):</span><br>        <span class="hljs-keyword">return</span> x * <span class="hljs-number">10</span> + y<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">char2num</span>(<span class="hljs-params">s</span>):</span><br>        <span class="hljs-keyword">return</span> DIGITS[s]<br>    <span class="hljs-keyword">return</span> reduce(fn, <span class="hljs-built_in">map</span>(char2num, s))<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python学习（二）：函数基础</title>
    <link href="/2022/01/22/python%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2022/01/22/python%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="python学习（二）：函数基础"><a href="#python学习（二）：函数基础" class="headerlink" title="python学习（二）：函数基础"></a>python学习（二）：函数基础</h2><p>本篇博客主要介绍了</p><ol><li>函数的基本介绍和简单例子</li><li>使用模块对函数进行管理</li><li>部分标准库中的函数和模块</li><li>函数作用域问题</li></ol><p>内容整理和修改自骆昊老师的github_python100天教学。</p><h3 id="一、函数简介和简单例子"><a href="#一、函数简介和简单例子" class="headerlink" title="一、函数简介和简单例子"></a>一、函数简介和简单例子</h3><p>数学上的函数通常形如<code>y = f(x)</code>或者<code>z = g(x, y)</code>这样的形式，在<code>y = f(x)</code>中，<code>f</code>是函数的名字，<code>x</code>是函数的自变量，<code>y</code>是函数的因变量；而在<code>z = g(x, y)</code>中，<code>g</code>是函数名，<code>x</code>和<code>y</code>是函数的自变量，<code>z</code>是函数的因变量。Python中的函数跟这个结构是一致的，每个函数都有自己的名字、自变量和因变量。我们通常把Python中函数的自变量称为函数的参数，而因变量称为函数的返回值。</p><p>在python中使用<code>def</code>定义函数，并为其附上一个名字，用<code>return</code>表示其返回值，函数的目的往往是为了减少重复的代码，增加代码的复用性，使代码可以被高效地使用。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 定义函数：def是定义函数的关键字、fac是函数名，num是参数（自变量）</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fac</span>(<span class="hljs-params">num</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;求阶乘&quot;&quot;&quot;</span><br>    result = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, num + <span class="hljs-number">1</span>):<br>        result *= n<br>    <span class="hljs-comment"># 返回num的阶乘（因变量）</span><br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-built_in">print</span>(fac(<span class="hljs-number">3</span>))<br></code></pre></div></td></tr></table></figure><p>以上就是一个函数定义和使用的基本例子，计算的是一个整数的阶乘</p><h3 id="二、用模块管理函数"><a href="#二、用模块管理函数" class="headerlink" title="二、用模块管理函数"></a>二、用模块管理函数</h3><p>使用模块(module)管理函数主要是为了提高团队协作开发时的效率，减少冲突，同时也可以高效地使用别人提供的模块。</p><p>在函数命名时如果在单一文件中命名了两个同名函数，则后定义的函数会把之前的函数覆盖，而如果没有模块管理，引用别人的文件时产生函数同名的问题将会很难解决，因此使用模块之后就有特定的用法来完成模块的引用和函数的调用。</p><h4 id="2-1-引用模块"><a href="#2-1-引用模块" class="headerlink" title="2.1 引用模块"></a>2.1 引用模块</h4><p>在使用函数的时候我们通过<code>import</code>关键字导入指定的模块再使用<strong>完全限定名</strong>的调用方式就可以区分到底要使用的是哪个模块中的<code>foo</code>函数，代码如下所示。</p><p><code>module1.py</code></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span>():</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello, world!&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p><code>module2.py</code></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span>():</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;goodbye, world!&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> module1<br><span class="hljs-keyword">import</span> module2<br><br><span class="hljs-comment"># 用“模块名.函数名”的方式（完全限定名）调用函数，</span><br>module1.foo()    <span class="hljs-comment"># hello, world!</span><br>module2.foo()    <span class="hljs-comment"># goodbye, world!</span><br></code></pre></div></td></tr></table></figure><p>在导入模块时，还可以使用<code>as</code>关键字对模块进行别名，这样我们可以使用更为简短的完全限定名。</p><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> module1 <span class="hljs-keyword">as</span> m1<br><span class="hljs-keyword">import</span> module2 <span class="hljs-keyword">as</span> m2<br><br>m1.foo()    <span class="hljs-comment"># hello, world!</span><br>m2.foo()    <span class="hljs-comment"># goodbye, world!</span><br></code></pre></div></td></tr></table></figure><h4 id="2-2-导入函数"><a href="#2-2-导入函数" class="headerlink" title="2.2 导入函数"></a>2.2 导入函数</h4><p>上面的代码我们导入了定义函数的模块，我们也可以使用<code>from...import...</code>语法从模块中直接导入需要使用的函数，代码如下所示。</p><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> module1 <span class="hljs-keyword">import</span> foo<br><br>foo()    <span class="hljs-comment"># hello, world!</span><br><br><span class="hljs-keyword">from</span> module2 <span class="hljs-keyword">import</span> foo<br><br>foo()    <span class="hljs-comment"># goodbye, world!</span><br></code></pre></div></td></tr></table></figure><p>如上的写法中就可以直接使用该函数，但是直接使用函数也就会出现函数覆盖的问题，所以在实际编写的时候需要留意。</p><h4 id="2-3-main函数使用"><a href="#2-3-main函数使用" class="headerlink" title="2.3 main函数使用"></a>2.3 main函数使用</h4><p>需要说明的是，如果我们导入的模块除了定义函数之外还有可以执行代码，那么Python解释器在导入这个模块时就会执行这些代码，事实上我们可能并不希望如此，因此如果我们在模块中编写了执行代码，最好是将这些执行代码放入如下所示的条件中，这样的话除非直接运行该模块，if条件下的这些代码是不会执行的，因为只有直接执行的模块的名字才是&quot;__main__&quot;。</p><p><code>module3.py</code></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span>():</span><br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bar</span>():</span><br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-comment"># __name__是Python中一个隐含的变量它代表了模块的名字</span><br><span class="hljs-comment"># 只有被Python解释器直接执行的模块的名字才是__main__</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;call foo()&#x27;</span>)<br>    foo()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;call bar()&#x27;</span>)<br>    bar()<br></code></pre></div></td></tr></table></figure><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> module3<br><br><span class="hljs-comment"># 导入module3时 不会执行模块中if条件成立时的代码 因为模块的名字是module3而不是__main__</span><br></code></pre></div></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="三、标准库中的模块和函数"><a href="#三、标准库中的模块和函数" class="headerlink" title="三、标准库中的模块和函数"></a>三、标准库中的模块和函数</h3><p>Python标准库中提供了大量的模块和函数来简化我们的开发工作，我们之前用过的<code>random</code>模块就为我们提供了生成随机数和进行随机抽样的函数；而<code>time</code>模块则提供了和时间操作相关的函数；上面求阶乘的函数在Python标准库中的<code>math</code>模块中已经有了，实际开发中并不需要我们自己编写，而<code>math</code>模块中还包括了计算正弦、余弦、指数、对数等一系列的数学函数。随着我们进一步的学习Python编程知识，我们还会用到更多的模块和函数。</p><p>Python标准库中还有一类函数是不需要<code>import</code>就能够直接使用的，我们将其称之为内置函数，这些内置函数都是很有用也是最常用的，下面的表格列出了一部分的内置函数。</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>abs</code></td><td>返回一个数的绝对值，例如：<code>abs(-1.3)</code>会返回<code>1.3</code>。</td></tr><tr><td><code>bin</code></td><td>把一个整数转换成以<code>&#39;0b&#39;</code>开头的二进制字符串，例如：<code>bin(123)</code>会返回<code>&#39;0b1111011&#39;</code>。</td></tr><tr><td><code>chr</code></td><td>将Unicode编码转换成对应的字符，例如：<code>chr(8364)</code>会返回<code>&#39;€&#39;</code>。</td></tr><tr><td><code>hex</code></td><td>将一个整数转换成以<code>&#39;0x&#39;</code>开头的十六进制字符串，例如：<code>hex(123)</code>会返回<code>&#39;0x7b&#39;</code>。</td></tr><tr><td><code>input</code></td><td>从输入中读取一行，返回读到的字符串。</td></tr><tr><td><code>len</code></td><td>获取字符串、列表等的长度。</td></tr><tr><td><code>max</code></td><td>返回多个参数或一个可迭代对象中的最大值，例如：<code>max(12, 95, 37)</code>会返回<code>95</code>。</td></tr><tr><td><code>min</code></td><td>返回多个参数或一个可迭代对象中的最小值，例如：<code>min(12, 95, 37)</code>会返回<code>12</code>。</td></tr><tr><td><code>oct</code></td><td>把一个整数转换成以<code>&#39;0o&#39;</code>开头的八进制字符串，例如：<code>oct(123)</code>会返回<code>&#39;0o173&#39;</code>。</td></tr><tr><td><code>open</code></td><td>打开一个文件并返回文件对象。</td></tr><tr><td><code>ord</code></td><td>将字符转换成对应的Unicode编码，例如：<code>ord(&#39;€&#39;)</code>会返回<code>8364</code>。</td></tr><tr><td><code>pow</code></td><td>求幂运算，例如：<code>pow(2, 3)</code>会返回<code>8</code>；<code>pow(2, 0.5)</code>会返回<code>1.4142135623730951</code>。</td></tr><tr><td><code>print</code></td><td>打印输出。</td></tr><tr><td><code>range</code></td><td>构造一个范围序列，例如：<code>range(100)</code>会产生<code>0</code>到<code>99</code>的整数序列。</td></tr><tr><td><code>round</code></td><td>按照指定的精度对数值进行四舍五入，例如：<code>round(1.23456, 4)</code>会返回<code>1.2346</code>。</td></tr><tr><td><code>sum</code></td><td>对一个序列中的项从左到右进行求和运算，例如：<code>sum(range(1, 101))</code>会返回<code>5050</code>。</td></tr><tr><td><code>type</code></td><td>返回对象的类型，例如：<code>type(10)</code>会返回<code>int</code>；而<code> type(&#39;hello&#39;)</code>会返回<code>str</code>。</td></tr></tbody></table><h3 id="四、变量的作用域"><a href="#四、变量的作用域" class="headerlink" title="四、变量的作用域"></a>四、变量的作用域</h3><p>最后，我们来讨论一下Python中有关变量作用域的问题。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span>():</span><br>    b = <span class="hljs-string">&#x27;hello&#x27;</span><br><br>    <span class="hljs-comment"># Python中可以在函数内部再定义函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bar</span>():</span><br>        c = <span class="hljs-literal">True</span><br>        <span class="hljs-built_in">print</span>(a)<br>        <span class="hljs-built_in">print</span>(b)<br>        <span class="hljs-built_in">print</span>(c)<br><br>    bar()<br>    <span class="hljs-comment"># print(c)  # NameError: name &#x27;c&#x27; is not defined</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    a = <span class="hljs-number">100</span><br>    <span class="hljs-comment"># print(b)  # NameError: name &#x27;b&#x27; is not defined</span><br>    foo()<br></code></pre></div></td></tr></table></figure><p>上面的代码能够顺利的执行并且打印出100、hello和True，但我们注意到了，在<code>bar</code>函数的内部并没有定义<code>a</code>和<code>b</code>两个变量，那么<code>a</code>和<code>b</code>是从哪里来的。我们在上面代码的<code>if</code>分支中定义了一个变量<code>a</code>，这是一个全局变量（global variable），属于全局作用域，因为它没有定义在任何一个函数中。在上面的<code>foo</code>函数中我们定义了变量<code>b</code>，这是一个定义在函数中的局部变量（local variable），属于局部作用域，在<code>foo</code>函数的外部并不能访问到它；但对于<code>foo</code>函数内部的<code>bar</code>函数来说，变量<code>b</code>属于嵌套作用域，在<code>bar</code>函数中我们是可以访问到它的。<code>bar</code>函数中的变量<code>c</code>属于局部作用域，在<code>bar</code>函数之外是无法访问的。事实上，Python查找一个变量时会按照<strong>“局部作用域”、“嵌套作用域”、“全局作用域”和“内置作用域”</strong>的顺序进行搜索，前三者我们在上面的代码中已经看到了，所谓的“内置作用域”就是Python内置的那些标识符，我们之前用过的<code>input</code>、<code>print</code>、<code>int</code>等都属于内置作用域。</p><p>再看看下面这段代码，我们希望通过函数调用修改全局变量<code>a</code>的值，但实际上下面的代码是做不到的。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span>():</span><br>    a = <span class="hljs-number">200</span><br>    <span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 200</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    a = <span class="hljs-number">100</span><br>    foo()<br>    <span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 100</span><br></code></pre></div></td></tr></table></figure><p>在调用<code>foo</code>函数后，我们发现<code>a</code>的值仍然是100，这是因为当我们在函数<code>foo</code>中写<code>a = 200</code>的时候，是重新定义了一个名字为<code>a</code>的局部变量，它跟全局作用域的<code>a</code>并不是同一个变量，因为局部作用域中有了自己的变量<code>a</code>，因此<code>foo</code>函数不再搜索全局作用域中的<code>a</code>。如果我们希望在<code>foo</code>函数中修改全局作用域中的<code>a</code>，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span>():</span><br>    <span class="hljs-keyword">global</span> a<br>    a = <span class="hljs-number">200</span><br>    <span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 200</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    a = <span class="hljs-number">100</span><br>    foo()<br>    <span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 200</span><br></code></pre></div></td></tr></table></figure><p>我们可以使用<code>global</code>关键字来指示<code>foo</code>函数中的变量<code>a</code>来自于全局作用域，如果全局作用域中没有<code>a</code>，那么下面一行的代码就会定义变量<code>a</code>并将其置于全局作用域。同理，如果我们希望函数内部的函数能够修改嵌套作用域中的变量，可以使用<code>nonlocal</code>关键字来指示变量来自于嵌套作用域，请大家自行试验。</p><p>在实际开发中，我们应该尽量减少对全局变量的使用，因为全局变量的作用域和影响过于广泛，可能会发生意料之外的修改和使用，除此之外全局变量比局部变量拥有更长的生命周期，可能导致对象占用的内存长时间无法被<a href="https://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)">垃圾回收</a>。事实上，减少对全局变量的使用，也是降低代码之间耦合度的一个重要举措，同时也是对<a href="https://zh.wikipedia.org/zh-hans/%E5%BE%97%E5%A2%A8%E5%BF%92%E8%80%B3%E5%AE%9A%E5%BE%8B">迪米特法则</a>的践行。</p><p>说了那么多，其实结论很简单，从现在开始我们可以将Python代码按照下面的格式进行书写，这一点点的改进其实就是在我们理解了函数和作用域的基础上跨出的巨大的一步。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-comment"># Todo: Add your code here</span><br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python学习（一）：基础知识整理</title>
    <link href="/2022/01/18/python%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2022/01/18/python%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="python学习（一-：基础知识整理"><a href="#python学习（一-：基础知识整理" class="headerlink" title="python学习（一)：基础知识整理"></a>python学习（一)：基础知识整理</h1><p>学习书籍：  《python编程：从入门到实践》</p><p>使用IDE:        pycharm 2021.3</p><p>使用python版本： Anaconda Python 3.9</p><p>python官网：</p><p><a href="https://www.python.org/">Welcome to Python.org</a></p><p>参考学习信息：</p><p> <a href="https://github.com/jackfrued/Python-Core-50-Courses">jackfrued/Python-Core-50-Courses: Python语言基础50课 (github.com)</a></p><p><a href="https://github.com/jackfrued/Python-100-Days">jackfrued/Python-100-Days: Python - 100天从新手到大师 (github.com)</a></p><h2 id="一、一些说明"><a href="#一、一些说明" class="headerlink" title="一、一些说明"></a>一、一些说明</h2><p>这篇博客主要是根据书籍的(二——九章节)进行整理，但由于书籍内容较为简单易懂，因此后续博客的python学习内容将根据以上github的两个repo内容进行学习。且内容主要是python与其他语言（Java，C++）不同的地方，或者是相关的语法糖。</p><p>本篇博客的内容主要包括python的基础知识展示，包括变量、字符串、数值等简单数据类型，列表、元组、字典等重要数据类型，以及分支语句，循环语句和对函数和类的简单介绍等。后续博客将从对函数进阶的知识开始写起。</p><h2 id="二、变量和简单数据类型"><a href="#二、变量和简单数据类型" class="headerlink" title="二、变量和简单数据类型"></a>二、变量和简单数据类型</h2><h3 id="2-1-变量"><a href="#2-1-变量" class="headerlink" title="2.1 变量"></a>2.1 变量</h3><h4 id="2-1-1-何为变量"><a href="#2-1-1-何为变量" class="headerlink" title="2.1.1 何为变量"></a>2.1.1 何为变量</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">message=<span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-built_in">print</span>(message)<br>message=<span class="hljs-string">&#x27;wiwi&#x27;</span><br><span class="hljs-built_in">print</span>(message)<br></code></pre></div></td></tr></table></figure><p>如上图，执行会打印<code>hello</code>，那么可以理解为<code>meesage</code>存储了后面字符串的信息，且这个信息可以被修改，python始终保存变量的最新值，打印时会将当前存储的信息打印出来。</p><h4 id="2-1-2-变量命名的部分规则"><a href="#2-1-2-变量命名的部分规则" class="headerlink" title="2.1.2 变量命名的部分规则"></a>2.1.2 变量命名的部分规则</h4><ul><li>变量名只包括字母、数字、下划线，以字母或下划线打头</li><li>变量名不含有空格，不能用python关键字和函数名作为变量名</li><li>变量名应简洁而具有描述性</li></ul><h4 id="2-1-3-变量命名错误"><a href="#2-1-3-变量命名错误" class="headerlink" title="2.1.3 变量命名错误"></a>2.1.3 变量命名错误</h4><p>命名错误时，程序会给出相应的错误信息。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">message=<span class="hljs-string">&quot;chekc&quot;</span><br><span class="hljs-built_in">print</span>(messag)<br><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;D:\python_learn\booktest\main.py&quot;</span>, line <span class="hljs-number">2</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-built_in">print</span>(messag)<br>NameError: name <span class="hljs-string">&#x27;messag&#x27;</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> defined<br></code></pre></div></td></tr></table></figure><h3 id="2-2-字符串"><a href="#2-2-字符串" class="headerlink" title="2.2 字符串"></a>2.2 字符串</h3><p>字符串是一系列字符，也是python的一种数据类型，往往用<code>“，’</code>双引号或单引号括起来</p><p>以下是一些基本的字符串操作：</p><ul><li><code>str.title()</code>，单词首字母大写</li><li><code>str.lower() str.upper()</code>,单词转换为大写（小写）</li><li><code>str1+str2</code>,字符串拼接</li><li><code>str.strip()</code>，去除两端空白符</li></ul><h3 id="2-3-数字"><a href="#2-3-数字" class="headerlink" title="2.3 数字"></a>2.3 数字</h3><p>包括整数，浮点数，数字运算一般可以在终端直接进行运行。</p><h4 id="2-3-1-使用str-避免类型错误"><a href="#2-3-1-使用str-避免类型错误" class="headerlink" title="2.3.1 使用str()避免类型错误"></a>2.3.1 使用str()避免类型错误</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">age=<span class="hljs-number">23</span><br>message=<span class="hljs-string">&quot;heloo&quot;</span>+age //错误写法<br>message=<span class="hljs-string">&quot;heloo&quot;</span>+<span class="hljs-built_in">str</span>(age)  //正确写法<br><span class="hljs-built_in">print</span>(message)<br></code></pre></div></td></tr></table></figure><p>如上图直接执行会报类型错误，由于程序无法判断是将age理解<strong>为数值还是字符串</strong>。</p><h3 id="2-4-注释"><a href="#2-4-注释" class="headerlink" title="2.4 注释"></a>2.4 注释</h3><p>使用<code>#</code>作为注释标记，该标记之后内容不会被解释器读取。</p><h3 id="2-5-python之禅"><a href="#2-5-python之禅" class="headerlink" title="2.5 python之禅"></a>2.5 python之禅</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> this<br>The Zen of Python, by Tim Peters<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Beautiful is better than ugly.</span><br><span class="hljs-string">Explicit is better than implicit.</span><br><span class="hljs-string">Simple is better than complex.</span><br><span class="hljs-string">Complex is better than complicated.</span><br><span class="hljs-string">Flat is better than nested.</span><br><span class="hljs-string">Sparse is better than dense.</span><br><span class="hljs-string">Readability counts.</span><br><span class="hljs-string">Special cases aren&#x27;t special enough to break the rules.</span><br><span class="hljs-string">Although practicality beats purity.</span><br><span class="hljs-string">Errors should never pass silently.</span><br><span class="hljs-string">Unless explicitly silenced.</span><br><span class="hljs-string">In the face of ambiguity, refuse the temptation to guess.</span><br><span class="hljs-string">There should be one-- and preferably only one --obvious way to do it.</span><br><span class="hljs-string">Although that way may not be obvious at first unless you&#x27;re Dutch.</span><br><span class="hljs-string">Now is better than never.</span><br><span class="hljs-string">Although never is often better than *right* now.</span><br><span class="hljs-string">If the implementation is hard to explain, it&#x27;s a bad idea.</span><br><span class="hljs-string">If the implementation is easy to explain, it may be a good idea.</span><br><span class="hljs-string">Namespaces are one honking great idea -- let&#x27;s do more of those!</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></div></td></tr></table></figure><h2 id="三、列表简介"><a href="#三、列表简介" class="headerlink" title="三、列表简介"></a>三、列表简介</h2><h3 id="3-1列表是什么"><a href="#3-1列表是什么" class="headerlink" title="3.1列表是什么"></a>3.1列表是什么</h3><p><strong>列表是由一系列按特定顺序排列的元素组成</strong>。用方括号（[])表示列表，用，分隔元素。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">bicycles=[<span class="hljs-string">&#x27;aa&#x27;</span>,<span class="hljs-string">&#x27;bb&#x27;</span>,<span class="hljs-string">&#x27;cc&#x27;</span>,<span class="hljs-string">&#x27;dd&#x27;</span>]<br><span class="hljs-built_in">print</span>(bicycles)<br></code></pre></div></td></tr></table></figure><p>基本用法：</p><ul><li>提取列表元素：<code>bicycles[i]</code>即可取出第i个项</li><li>索引从0，而不是1开始计数</li><li>索引可以为负数，-1代表倒数第一个元素，以此类推。</li></ul><h3 id="3-2-修改、添加和删除元素"><a href="#3-2-修改、添加和删除元素" class="headerlink" title="3.2 修改、添加和删除元素"></a>3.2 修改、添加和删除元素</h3><p>1.修改：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">a[<span class="hljs-number">0</span>]=<span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><p>2.添加，删除：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">a=[<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>]<br><br>a.append(<span class="hljs-number">4</span>)         //列表末尾添加元素<br>a.insert(<span class="hljs-number">0</span>,<span class="hljs-number">4</span>)       //列表指定索引位置插入元素<br><br><span class="hljs-keyword">del</span> a[<span class="hljs-number">0</span>]     //删除第一个元素<br>k=a.pop()    //弹出最后一个元素，也可以加索引<br>a.remove(<span class="hljs-string">&#x27;3&#x27;</span>)  //删除为该值的第一个指定元素<br></code></pre></div></td></tr></table></figure><h3 id="3-3-组织列表"><a href="#3-3-组织列表" class="headerlink" title="3.3 组织列表"></a>3.3 组织列表</h3><p>排序，长度：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">a=[<span class="hljs-string">&#x27;abc&#x27;</span>,<span class="hljs-string">&#x27;bca&#x27;</span>,<span class="hljs-string">&#x27;cba&#x27;</span>]<br>a.sort()   //永久升序排序<br>a.sort(reverse=<span class="hljs-literal">True</span>)  //永久降序排列<br><span class="hljs-built_in">sorted</span>(a)  //临时排序，不改变原列表<br><br>a.reverse()   //倒序排列<br><span class="hljs-built_in">len</span>(a)        //返回长度<br></code></pre></div></td></tr></table></figure><h2 id="四、操作列表"><a href="#四、操作列表" class="headerlink" title="四、操作列表"></a>四、操作列表</h2><h3 id="4-1-遍历列表"><a href="#4-1-遍历列表" class="headerlink" title="4.1 遍历列表"></a>4.1 遍历列表</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">magicians=[<span class="hljs-string">&#x27;alice&#x27;</span>,<span class="hljs-string">&#x27;bob&#x27;</span>,<span class="hljs-string">&#x27;kavin&#x27;</span>]<br><span class="hljs-keyword">for</span> magician <span class="hljs-keyword">in</span> magicians:<br>    <span class="hljs-built_in">print</span>(magician)<br></code></pre></div></td></tr></table></figure><h3 id="4-2-创建数值列表"><a href="#4-2-创建数值列表" class="headerlink" title="4.2 创建数值列表"></a>4.2 创建数值列表</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(value)<br>digits=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>))    <span class="hljs-comment">#生成1-4的列表</span><br>even_numbers=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">11</span>,<span class="hljs-number">2</span>))   <span class="hljs-comment">#指定步长1-10内偶数</span><br><span class="hljs-comment">#数值列表处理</span><br><span class="hljs-built_in">min</span>(digits)<br><span class="hljs-built_in">max</span>(digits)<br><span class="hljs-built_in">sum</span>(digits)<br><br><span class="hljs-comment">#列表解析</span><br>squares=[value**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>)]<br></code></pre></div></td></tr></table></figure><h3 id="4-3-使用列表的一部分"><a href="#4-3-使用列表的一部分" class="headerlink" title="4.3 使用列表的一部分"></a>4.3 使用列表的一部分</h3><h4 id="4-3-1-切片"><a href="#4-3-1-切片" class="headerlink" title="4.3.1 切片"></a>4.3.1 切片</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">digits=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>))    <span class="hljs-comment">#生成1-4的列表</span><br><span class="hljs-built_in">print</span>(digits[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>])         <span class="hljs-comment">#打印前3个元素</span><br><span class="hljs-built_in">print</span>(digits[:<span class="hljs-number">3</span>])         <span class="hljs-comment">#打印前3个元素，自动从最前开始</span><br><span class="hljs-built_in">print</span>(digits[<span class="hljs-number">0</span>:])         <span class="hljs-comment">#打印全部元素，自动到最后结束</span><br><span class="hljs-built_in">print</span>(digits[-<span class="hljs-number">3</span>:])         <span class="hljs-comment">#打印倒数3个元素</span><br><br><span class="hljs-comment">#复制列表</span><br>dii=digits[:]<br></code></pre></div></td></tr></table></figure><h3 id="4-4-元组"><a href="#4-4-元组" class="headerlink" title="4.4 元组"></a>4.4 元组</h3><p><strong>不可变列表被称为元组</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">dimen=(<span class="hljs-number">200</span>,<span class="hljs-number">50</span>)  <span class="hljs-comment">#定义元组</span><br></code></pre></div></td></tr></table></figure><h2 id="五、if语句"><a href="#五、if语句" class="headerlink" title="五、if语句"></a>五、if语句</h2><p>条件判断语句：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">cars=[<span class="hljs-string">&#x27;aua&#x27;</span>,<span class="hljs-string">&#x27;bub&#x27;</span>,<span class="hljs-string">&#x27;cuc&#x27;</span>]<br><span class="hljs-keyword">for</span> car <span class="hljs-keyword">in</span> cars:<br>    <span class="hljs-keyword">if</span> car == <span class="hljs-string">&#x27;aua&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(car.upper())<br>    <span class="hljs-keyword">elif</span> car==<span class="hljs-string">&#x27;bub&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(car.lower())<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(car.title())<br><br><span class="hljs-keyword">if</span> cars[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;happy&#x27;</span> <span class="hljs-keyword">and</span> cars[<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;bub&#x27;</span>:    //且<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;aua&#x27;</span> <span class="hljs-keyword">in</span> cars:<br>    <span class="hljs-keyword">pass</span><br></code></pre></div></td></tr></table></figure><h2 id="六、字典"><a href="#六、字典" class="headerlink" title="六、字典"></a>六、字典</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#创建字典</span><br>alien_0=&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span>,<span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>&#125;<br><span class="hljs-comment">#访问字典</span><br><span class="hljs-built_in">print</span>(alien_0[<span class="hljs-string">&#x27;color&#x27;</span>])<br><span class="hljs-built_in">print</span>(alien_0[<span class="hljs-string">&#x27;points&#x27;</span>])<br><span class="hljs-comment">#增加键值对</span><br>alien_0[<span class="hljs-string">&#x27;x_pos&#x27;</span>]=<span class="hljs-number">0</span><br><span class="hljs-comment">#删除键值对</span><br><span class="hljs-keyword">del</span> alien_0[<span class="hljs-string">&#x27;x_pos&#x27;</span>]<br><span class="hljs-comment">#遍历字典</span><br><span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> alien_0.items():<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment">#遍历键</span><br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> languages.keys():<br>    <span class="hljs-keyword">pass</span><br></code></pre></div></td></tr></table></figure><p>字典是一系列键——值对，每个键和一个值相对应，使用键访问对应的值。</p><p>使用{}表示字典</p><h2 id="七、用户输入和while循环"><a href="#七、用户输入和while循环" class="headerlink" title="七、用户输入和while循环"></a>七、用户输入和while循环</h2><p>使用<code>input</code>接受用户输入</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">message=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;enter your name: &quot;</span>)<br><span class="hljs-built_in">print</span>(message)<br><br><span class="hljs-comment">#处理数字输入,将字符串转化为数字</span><br>age=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;how old are you? &quot;</span>)<br>age=<span class="hljs-built_in">int</span>(age)<br><br><span class="hljs-comment">#while循环</span><br>a=<span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> a&lt;=<span class="hljs-number">5</span>:<br>    a+=<span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><p>使用break可以退出循环，continue直接跳转到该循环的开头判断处。</p><h2 id="八、函数"><a href="#八、函数" class="headerlink" title="八、函数"></a>八、函数</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#函数定义</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">greet</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;hello&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello&quot;</span>)<br><br><span class="hljs-comment">#传递信息</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">greet2</span>(<span class="hljs-params">name</span>):</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello&quot;</span>+name)<br><br><span class="hljs-comment">#函数传递参数有多种实参</span><br><span class="hljs-comment">#1.位置实参：</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">a</span>(<span class="hljs-params">a,b,c,d</span>):</span><br>    <span class="hljs-keyword">pass</span><br>a(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)      <span class="hljs-comment">#按位置顺序对应上方的参数</span><br><br><span class="hljs-comment">#2.关键字实参：</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">describe_ani</span>(<span class="hljs-params"><span class="hljs-built_in">type</span>,name</span>):</span><br>    <span class="hljs-keyword">pass</span><br>describe_ani(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;dog&#x27;</span>,name=<span class="hljs-string">&#x27;harry&#x27;</span>)   <span class="hljs-comment">#以键值对形式传参</span><br><br><span class="hljs-comment">#3.默认值，形参列表中一般先列出无默认值，再列出有默认值</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">describe_ani</span>(<span class="hljs-params"><span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;dog&#x27;</span>,name</span>):</span><br>    <span class="hljs-keyword">pass</span><br>describe_ani(name=<span class="hljs-string">&#x27;harry&#x27;</span>)   <span class="hljs-comment">#使用默认值</span><br><br><span class="hljs-comment">#4.返回值</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_formatted_name</span>(<span class="hljs-params">first_name, last_name</span>):</span><br>    full_name=first_name+<span class="hljs-string">&#x27; &#x27;</span>+last_name<br>    <span class="hljs-keyword">return</span> full_name.title()<br>musician=get_formatted_name(<span class="hljs-string">&#x27;jimi&#x27;</span>,<span class="hljs-string">&#x27;page&#x27;</span>)<br><br><span class="hljs-comment">#5.可变位置参数，需要放在前几种情况之后</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cook</span>(<span class="hljs-params">*cookies</span>):</span><br>    <span class="hljs-keyword">for</span> cookie <span class="hljs-keyword">in</span> cookies:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;cookie&quot;</span>)<br>cook(<span class="hljs-string">&#x27;apple&#x27;</span>,<span class="hljs-string">&#x27;banana&#x27;</span>)<br><br><span class="hljs-comment">#6.可变关键字参数，需要放在前几种情况之后</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello</span>(<span class="hljs-params">**hellos</span>):</span><br>    <span class="hljs-keyword">pass</span><br>hello(apple=<span class="hljs-string">&#x27;apple&#x27;</span>,banana=<span class="hljs-string">&#x27;banana&#x27;</span>)//任意个数<br></code></pre></div></td></tr></table></figure><h2 id="九、类"><a href="#九、类" class="headerlink" title="九、类"></a>九、类</h2><p>面向对象编程具有无与伦比的威力</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#类的定义例子</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span>():</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self,name,age</span>):</span><br>        self.name=name    <br>        self.age=age<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sit</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(self.name.title()+<span class="hljs-string">&quot;is now sitting!&quot;</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">roll_over</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(self.name.title()+<span class="hljs-string">&quot; rooled over!&quot;</span>)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
